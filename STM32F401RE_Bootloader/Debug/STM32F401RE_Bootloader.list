
STM32F401RE_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b0  080043b0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b8  080043b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080043c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000068  08004428  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004428  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000914f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b81  00000000  00000000  0002922a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0002adb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b3  00000000  00000000  0002b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b89  00000000  00000000  0002bd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a6c6  00000000  00000000  000418bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085995  00000000  00000000  0004bf82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002800  00000000  00000000  000d1918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d4118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e80 	.word	0x08003e80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003e80 	.word	0x08003e80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f001 f86e 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 fda0 	bl	80010d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fe72 	bl	8001280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 fe46 	bl	800122c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 fe1a 	bl	80011d8 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80005a4:	f000 fe04 	bl	80011b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80005a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <main+0x48>)
 80005ae:	f001 fe95 	bl	80022dc <HAL_GPIO_ReadPin>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d105      	bne.n	80005c4 <main+0x38>
  {
	  printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x4c>)
 80005ba:	f000 fa0b 	bl	80009d4 <printmsg>
	  bootloader_uart_read_data();
 80005be:	f000 f963 	bl	8000888 <bootloader_uart_read_data>
 80005c2:	e004      	b.n	80005ce <main+0x42>
  }else
  {
	  printmsg("BL_DEBUG_MSG:Button is not pressed .. going to user app\n\r");
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <main+0x50>)
 80005c6:	f000 fa05 	bl	80009d4 <printmsg>
	  bootloader_jump_to_user_app();
 80005ca:	f000 f9d7 	bl	800097c <bootloader_jump_to_user_app>
 80005ce:	2300      	movs	r3, #0
  }


  /* USER CODE END 2 */
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020800 	.word	0x40020800
 80005d8:	08003e98 	.word	0x08003e98
 80005dc:	08003ed0 	.word	0x08003ed0

080005e0 <configure_flash_sector_rw_protection>:

uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	460b      	mov	r3, r1
 80005ec:	71bb      	strb	r3, [r7, #6]
 80005ee:	4613      	mov	r3, r2
 80005f0:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 80005f2:	4b44      	ldr	r3, [pc, #272]	; (8000704 <configure_flash_sector_rw_protection+0x124>)
 80005f4:	60fb      	str	r3, [r7, #12]

	  if(disable)
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d025      	beq.n	8000648 <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80005fc:	f001 fa5c 	bl	8001ab8 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000600:	bf00      	nop
 8000602:	4b41      	ldr	r3, [pc, #260]	; (8000708 <configure_flash_sector_rw_protection+0x128>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1f9      	bne.n	8000602 <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f043 0202 	orr.w	r2, r3, #2
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000632:	bf00      	nop
 8000634:	4b34      	ldr	r3, [pc, #208]	; (8000708 <configure_flash_sector_rw_protection+0x128>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f9      	bne.n	8000634 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8000640:	f001 fa56 	bl	8001af0 <HAL_FLASH_OB_Lock>

			return 0;
 8000644:	2300      	movs	r3, #0
 8000646:	e058      	b.n	80006fa <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d126      	bne.n	800069c <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 800064e:	f001 fa33 	bl	8001ab8 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000652:	bf00      	nop
 8000654:	4b2c      	ldr	r3, [pc, #176]	; (8000708 <configure_flash_sector_rw_protection+0x128>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f9      	bne.n	8000654 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	0412      	lsls	r2, r2, #16
 8000674:	43d2      	mvns	r2, r2
 8000676:	401a      	ands	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f043 0202 	orr.w	r2, r3, #2
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8000688:	bf00      	nop
 800068a:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <configure_flash_sector_rw_protection+0x128>)
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f9      	bne.n	800068a <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 8000696:	f001 fa2b 	bl	8001af0 <HAL_FLASH_OB_Lock>
 800069a:	e02d      	b.n	80006f8 <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 800069c:	79bb      	ldrb	r3, [r7, #6]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d12a      	bne.n	80006f8 <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80006a2:	f001 fa09 	bl	8001ab8 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80006a6:	bf00      	nop
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <configure_flash_sector_rw_protection+0x128>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f9      	bne.n	80006a8 <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	79fa      	ldrb	r2, [r7, #7]
 80006d2:	0412      	lsls	r2, r2, #16
 80006d4:	431a      	orrs	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f043 0202 	orr.w	r2, r3, #2
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80006e6:	bf00      	nop
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <configure_flash_sector_rw_protection+0x128>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f9      	bne.n	80006e8 <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 80006f4:	f001 f9fc 	bl	8001af0 <HAL_FLASH_OB_Lock>
    }

		return 0;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023c14 	.word	0x40023c14
 8000708:	40023c00 	.word	0x40023c00

0800070c <execute_mem_write>:

uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 800071c:	f001 f99a 	bl	8001a54 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	e014      	b.n	8000750 <execute_mem_write+0x44>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	18d1      	adds	r1, r2, r3
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2200      	movs	r2, #0
 8000738:	461c      	mov	r4, r3
 800073a:	4615      	mov	r5, r2
 800073c:	4622      	mov	r2, r4
 800073e:	462b      	mov	r3, r5
 8000740:	2000      	movs	r0, #0
 8000742:	f001 f933 	bl	80019ac <HAL_FLASH_Program>
 8000746:	4603      	mov	r3, r0
 8000748:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 800074a:	693b      	ldr	r3, [r7, #16]
 800074c:	3301      	adds	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3e6      	bcc.n	8000726 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8000758:	f001 f99e 	bl	8001a98 <HAL_FLASH_Lock>

    return status;
 800075c:	7dfb      	ldrb	r3, [r7, #23]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bdb0      	pop	{r4, r5, r7, pc}

08000766 <execute_flash_erase>:


uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b08a      	sub	sp, #40	; 0x28
 800076a:	af00      	add	r7, sp, #0
 800076c:	4603      	mov	r3, r0
 800076e:	460a      	mov	r2, r1
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	4613      	mov	r3, r2
 8000774:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 7 )
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	2b07      	cmp	r3, #7
 800077a:	d901      	bls.n	8000780 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 800077c:	2304      	movs	r3, #4
 800077e:	e035      	b.n	80007ec <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2bff      	cmp	r3, #255	; 0xff
 8000784:	d002      	beq.n	800078c <execute_flash_erase+0x26>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b07      	cmp	r3, #7
 800078a:	d82e      	bhi.n	80007ea <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2bff      	cmp	r3, #255	; 0xff
 8000790:	d102      	bne.n	8000798 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000792:	2301      	movs	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	e012      	b.n	80007be <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f1c3 0308 	rsb	r3, r3, #8
 800079e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( number_of_sector > remanining_sector)
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d902      	bls.n	80007b2 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 80007ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b0:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 80007c2:	f001 f947 	bl	8001a54 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 80007c6:	2302      	movs	r3, #2
 80007c8:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fadb 	bl	8001d90 <HAL_FLASHEx_Erase>
 80007da:	4603      	mov	r3, r0
 80007dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 80007e0:	f001 f95a 	bl	8001a98 <HAL_FLASH_Lock>

		return status;
 80007e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007e8:	e000      	b.n	80007ec <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 80007ea:	2304      	movs	r3, #4
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <verify_address>:

uint8_t verify_address(uint32_t go_address)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000802:	d305      	bcc.n	8000810 <verify_address+0x1c>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <verify_address+0x40>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d801      	bhi.n	8000810 <verify_address+0x1c>
		{
			return ADDR_VALID;
 800080c:	2300      	movs	r3, #0
 800080e:	e00a      	b.n	8000826 <verify_address+0x32>
		}
		else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000816:	d305      	bcc.n	8000824 <verify_address+0x30>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a07      	ldr	r2, [pc, #28]	; (8000838 <verify_address+0x44>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d801      	bhi.n	8000824 <verify_address+0x30>
		{
			return ADDR_VALID;
 8000820:	2300      	movs	r3, #0
 8000822:	e000      	b.n	8000826 <verify_address+0x32>
		}else
			return ADDR_INVALID;
 8000824:	2301      	movs	r3, #1
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20018000 	.word	0x20018000
 8000838:	0807ffff 	.word	0x0807ffff

0800083c <get_flash_rdp_level>:

uint8_t get_flash_rdp_level(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
	uint8_t rdp_status=0;
 8000842:	2300      	movs	r3, #0
 8000844:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;

#else
	volatile uint32_t *pOB_addr = (uint32_t *) 0x1FFFC000;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <get_flash_rdp_level+0x24>)
 8000848:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t)(*pOB_addr >> 8);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	71fb      	strb	r3, [r7, #7]

#endif
	return rdp_status;
 8000852:	79fb      	ldrb	r3, [r7, #7]
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	1fffc000 	.word	0x1fffc000

08000864 <get_mcu_chip_id>:

uint16_t get_mcu_chip_id(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
	uint16_t cid;
	cid = (uint16_t)(DBGMCU ->IDCODE) & 0x0FFF;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <get_mcu_chip_id+0x20>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000874:	80fb      	strh	r3, [r7, #6]
	return cid;
 8000876:	88fb      	ldrh	r3, [r7, #6]
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e0042000 	.word	0xe0042000

08000888 <bootloader_uart_read_data>:

void bootloader_uart_read_data(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
	uint8_t rcv_len=0;
 800088e:	2300      	movs	r3, #0
 8000890:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000892:	22c8      	movs	r2, #200	; 0xc8
 8000894:	2100      	movs	r1, #0
 8000896:	4835      	ldr	r0, [pc, #212]	; (800096c <bootloader_uart_read_data+0xe4>)
 8000898:	f002 fe6e 	bl	8003578 <memset>

		HAL_UART_Receive(&huart1, bl_rx_buffer, 1, HAL_MAX_DELAY);
 800089c:	f04f 33ff 	mov.w	r3, #4294967295
 80008a0:	2201      	movs	r2, #1
 80008a2:	4932      	ldr	r1, [pc, #200]	; (800096c <bootloader_uart_read_data+0xe4>)
 80008a4:	4832      	ldr	r0, [pc, #200]	; (8000970 <bootloader_uart_read_data+0xe8>)
 80008a6:	f002 fac2 	bl	8002e2e <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 80008aa:	4b30      	ldr	r3, [pc, #192]	; (800096c <bootloader_uart_read_data+0xe4>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart1, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	492e      	ldr	r1, [pc, #184]	; (8000974 <bootloader_uart_read_data+0xec>)
 80008ba:	482d      	ldr	r0, [pc, #180]	; (8000970 <bootloader_uart_read_data+0xe8>)
 80008bc:	f002 fab7 	bl	8002e2e <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <bootloader_uart_read_data+0xe4>)
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	3b51      	subs	r3, #81	; 0x51
 80008c6:	2b0b      	cmp	r3, #11
 80008c8:	d84a      	bhi.n	8000960 <bootloader_uart_read_data+0xd8>
 80008ca:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <bootloader_uart_read_data+0x48>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	08000901 	.word	0x08000901
 80008d4:	08000909 	.word	0x08000909
 80008d8:	08000911 	.word	0x08000911
 80008dc:	08000919 	.word	0x08000919
 80008e0:	08000921 	.word	0x08000921
 80008e4:	08000929 	.word	0x08000929
 80008e8:	08000931 	.word	0x08000931
 80008ec:	08000939 	.word	0x08000939
 80008f0:	08000941 	.word	0x08000941
 80008f4:	08000949 	.word	0x08000949
 80008f8:	08000951 	.word	0x08000951
 80008fc:	08000959 	.word	0x08000959
		{
					case BL_GET_VER:
		                bootloader_handle_getver_cmd(bl_rx_buffer);
 8000900:	481a      	ldr	r0, [pc, #104]	; (800096c <bootloader_uart_read_data+0xe4>)
 8000902:	f000 f901 	bl	8000b08 <bootloader_handle_getver_cmd>
		                break;
 8000906:	e02f      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_GET_HELP:
		                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000908:	4818      	ldr	r0, [pc, #96]	; (800096c <bootloader_uart_read_data+0xe4>)
 800090a:	f000 f945 	bl	8000b98 <bootloader_handle_gethelp_cmd>
		                break;
 800090e:	e02b      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_GET_CID:
		                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000910:	4816      	ldr	r0, [pc, #88]	; (800096c <bootloader_uart_read_data+0xe4>)
 8000912:	f000 f97d 	bl	8000c10 <bootloader_handle_getcid_cmd>
		                break;
 8000916:	e027      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_GET_RDP_STATUS:
		                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000918:	4814      	ldr	r0, [pc, #80]	; (800096c <bootloader_uart_read_data+0xe4>)
 800091a:	f000 f9c5 	bl	8000ca8 <bootloader_handle_getrdp_cmd>
		                break;
 800091e:	e023      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_GO_TO_ADDR:
		                bootloader_handle_go_cmd(bl_rx_buffer);
 8000920:	4812      	ldr	r0, [pc, #72]	; (800096c <bootloader_uart_read_data+0xe4>)
 8000922:	f000 fa0d 	bl	8000d40 <bootloader_handle_go_cmd>
		                break;
 8000926:	e01f      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_FLASH_ERASE:
		                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <bootloader_uart_read_data+0xe4>)
 800092a:	f000 fa75 	bl	8000e18 <bootloader_handle_flash_erase_cmd>
		                break;
 800092e:	e01b      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_MEM_WRITE:
		                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000930:	480e      	ldr	r0, [pc, #56]	; (800096c <bootloader_uart_read_data+0xe4>)
 8000932:	f000 fadb 	bl	8000eec <bootloader_handle_mem_write_cmd>
		                break;
 8000936:	e017      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_EN_RW_PROTECT:
		                bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <bootloader_uart_read_data+0xe4>)
 800093a:	f000 fb53 	bl	8000fe4 <bootloader_handle_en_rw_protect>
		                break;
 800093e:	e013      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_MEM_READ:
		                bootloader_handle_mem_read(bl_rx_buffer);
 8000940:	480a      	ldr	r0, [pc, #40]	; (800096c <bootloader_uart_read_data+0xe4>)
 8000942:	f000 fba1 	bl	8001088 <bootloader_handle_mem_read>
		                break;
 8000946:	e00f      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_READ_SECTOR_P_STATUS:
		                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <bootloader_uart_read_data+0xe4>)
 800094a:	f000 fba7 	bl	800109c <bootloader_handle_read_sector_protection_status>
		                break;
 800094e:	e00b      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		            case BL_OTP_READ:
		                bootloader_handle_read_otp(bl_rx_buffer);
 8000950:	4806      	ldr	r0, [pc, #24]	; (800096c <bootloader_uart_read_data+0xe4>)
 8000952:	f000 fbad 	bl	80010b0 <bootloader_handle_read_otp>
		                break;
 8000956:	e007      	b.n	8000968 <bootloader_uart_read_data+0xe0>
								case BL_DIS_R_W_PROTECT:
		                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <bootloader_uart_read_data+0xe4>)
 800095a:	f000 fbb3 	bl	80010c4 <bootloader_handle_dis_rw_protect>
		                break;
 800095e:	e003      	b.n	8000968 <bootloader_uart_read_data+0xe0>
		             default:
		                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <bootloader_uart_read_data+0xf0>)
 8000962:	f000 f837 	bl	80009d4 <printmsg>
		                break;
 8000966:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 8000968:	e793      	b.n	8000892 <bootloader_uart_read_data+0xa>
 800096a:	bf00      	nop
 800096c:	20000114 	.word	0x20000114
 8000970:	2000008c 	.word	0x2000008c
 8000974:	20000115 	.word	0x20000115
 8000978:	08003f0c 	.word	0x08003f0c

0800097c <bootloader_jump_to_user_app>:
		}
	}
}

void bootloader_jump_to_user_app(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
	void (*app_reset_handler)(void);
	printmsg("BL_DEBUG_MSG: bootloader_jump_to_user_app\n\r");
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <bootloader_jump_to_user_app+0x44>)
 8000984:	f000 f826 	bl	80009d4 <printmsg>

	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <bootloader_jump_to_user_app+0x48>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG: MSP value : %#x\n\r",msp_value);
 800098e:	68f9      	ldr	r1, [r7, #12]
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <bootloader_jump_to_user_app+0x4c>)
 8000992:	f000 f81f 	bl	80009d4 <printmsg>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f383 8808 	msr	MSP, r3
}
 80009a0:	bf00      	nop

	__set_MSP(msp_value);

	uint32_t resethandler_address = *(volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <bootloader_jump_to_user_app+0x50>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	60bb      	str	r3, [r7, #8]
	app_reset_handler = (void *)resethandler_address;
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	607b      	str	r3, [r7, #4]
	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n\r", app_reset_handler);
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <bootloader_jump_to_user_app+0x54>)
 80009b0:	f000 f810 	bl	80009d4 <printmsg>
	app_reset_handler();
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4798      	blx	r3
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	08003f44 	.word	0x08003f44
 80009c4:	08008000 	.word	0x08008000
 80009c8:	08003f70 	.word	0x08003f70
 80009cc:	08008004 	.word	0x08008004
 80009d0:	08003f90 	.word	0x08003f90

080009d4 <printmsg>:

void printmsg(char *format,...)
{
 80009d4:	b40f      	push	{r0, r1, r2, r3}
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b096      	sub	sp, #88	; 0x58
 80009da:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	va_list args;
	va_start(args, format);
 80009dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e0:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fdba 	bl	8003564 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fbf3 	bl	80001e0 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	f107 0108 	add.w	r1, r7, #8
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <printmsg+0x48>)
 8000a08:	f002 f97f 	bl	8002d0a <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000a0c:	bf00      	nop
 8000a0e:	3758      	adds	r7, #88	; 0x58
 8000a10:	46bd      	mov	sp, r7
 8000a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a16:	b004      	add	sp, #16
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200000d0 	.word	0x200000d0

08000a20 <bootloader_send_nack>:

void bootloader_send_nack(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000a26:	237f      	movs	r3, #127	; 0x7f
 8000a28:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &nack, 1, HAL_MAX_DELAY);
 8000a2a:	1df9      	adds	r1, r7, #7
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	2201      	movs	r2, #1
 8000a32:	4803      	ldr	r0, [pc, #12]	; (8000a40 <bootloader_send_nack+0x20>)
 8000a34:	f002 f969 	bl	8002d0a <HAL_UART_Transmit>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000008c 	.word	0x2000008c

08000a44 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8000a54:	23a5      	movs	r3, #165	; 0xa5
 8000a56:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart1, ack_buf, 2, HAL_MAX_DELAY);
 8000a5c:	f107 010c 	add.w	r1, r7, #12
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	2202      	movs	r2, #2
 8000a66:	4803      	ldr	r0, [pc, #12]	; (8000a74 <bootloader_send_ack+0x30>)
 8000a68:	f002 f94f 	bl	8002d0a <HAL_UART_Transmit>
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000008c 	.word	0x2000008c

08000a78 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, pBuffer, len, HAL_MAX_DELAY);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <bootloader_uart_write_data+0x24>)
 8000a8e:	f002 f93c 	bl	8002d0a <HAL_UART_Transmit>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000008c 	.word	0x2000008c

08000aa0 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len,uint32_t crc_host)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue=0xff;
 8000aac:	23ff      	movs	r3, #255	; 0xff
 8000aae:	61fb      	str	r3, [r7, #28]
	for (uint32_t i=0 ; i < len ; i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	e00f      	b.n	8000ad6 <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	4413      	add	r3, r2
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480a      	ldr	r0, [pc, #40]	; (8000af4 <bootloader_verify_crc+0x54>)
 8000aca:	f000 ff44 	bl	8001956 <HAL_CRC_Accumulate>
 8000ace:	61f8      	str	r0, [r7, #28]
	for (uint32_t i=0 ; i < len ; i++)
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d3eb      	bcc.n	8000ab6 <bootloader_verify_crc+0x16>
	}
	if (uwCRCValue == crc_host)
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d101      	bne.n	8000aea <bootloader_verify_crc+0x4a>
	{
		return VERIFY_CRC_SUCCESS;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <bootloader_verify_crc+0x4c>
	}

	return VERIFY_CRC_FAIL;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3720      	adds	r7, #32
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000084 	.word	0x20000084

08000af8 <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8000afc:	2310      	movs	r3, #16
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <bootloader_handle_getver_cmd>:

void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;
	printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n\r");
 8000b10:	481d      	ldr	r0, [pc, #116]	; (8000b88 <bootloader_handle_getver_cmd+0x80>)
 8000b12:	f7ff ff5f 	bl	80009d4 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t *)(bl_rx_buffer+command_packet_len - 4));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3b04      	subs	r3, #4
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4413      	add	r3, r2
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3b04      	subs	r3, #4
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4619      	mov	r1, r3
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ffb4 	bl	8000aa0 <bootloader_verify_crc>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d11a      	bne.n	8000b74 <bootloader_handle_getver_cmd+0x6c>
	{
		printmsg("BL_DEBUG_MSG:checksum succes!\n\r");
 8000b3e:	4813      	ldr	r0, [pc, #76]	; (8000b8c <bootloader_handle_getver_cmd+0x84>)
 8000b40:	f7ff ff48 	bl	80009d4 <printmsg>
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff7a 	bl	8000a44 <bootloader_send_ack>
		bl_version=get_bootloader_version();
 8000b50:	f7ff ffd2 	bl	8000af8 <get_bootloader_version>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n\r",bl_version,bl_version);
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <bootloader_handle_getver_cmd+0x88>)
 8000b62:	f7ff ff37 	bl	80009d4 <printmsg>
		bootloader_uart_write_data(&bl_version,1);
 8000b66:	f107 030f 	add.w	r3, r7, #15
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff83 	bl	8000a78 <bootloader_uart_write_data>
	}else
	{
		printmsg("BL_DEBUG_MSG:checksum fail \n\r");
		bootloader_send_nack();
	}
}
 8000b72:	e004      	b.n	8000b7e <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG:checksum fail \n\r");
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <bootloader_handle_getver_cmd+0x8c>)
 8000b76:	f7ff ff2d 	bl	80009d4 <printmsg>
		bootloader_send_nack();
 8000b7a:	f7ff ff51 	bl	8000a20 <bootloader_send_nack>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	08003fc0 	.word	0x08003fc0
 8000b8c:	08003fec 	.word	0x08003fec
 8000b90:	0800400c 	.word	0x0800400c
 8000b94:	0800402c 	.word	0x0800402c

08000b98 <bootloader_handle_gethelp_cmd>:

void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n\r");
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <bootloader_handle_gethelp_cmd+0x64>)
 8000ba2:	f7ff ff17 	bl	80009d4 <printmsg>
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <bootloader_handle_gethelp_cmd+0x68>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len -4));
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3b04      	subs	r3, #4
 8000bb2:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <bootloader_handle_gethelp_cmd+0x68>)
 8000bb4:	4413      	add	r3, r2
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60bb      	str	r3, [r7, #8]

	if (!bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3b04      	subs	r3, #4
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <bootloader_handle_gethelp_cmd+0x68>)
 8000bc4:	f7ff ff6c 	bl	8000aa0 <bootloader_verify_crc>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10d      	bne.n	8000bea <bootloader_handle_gethelp_cmd+0x52>
		{
			printmsg("BL_DEBUG_MSG:checksum succes!\n\r");
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <bootloader_handle_gethelp_cmd+0x6c>)
 8000bd0:	f7ff ff00 	bl	80009d4 <printmsg>
			bootloader_send_ack(bl_rx_buffer[0],sizeof(supported_commands));
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <bootloader_handle_gethelp_cmd+0x68>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	210c      	movs	r1, #12
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff32 	bl	8000a44 <bootloader_send_ack>
			bootloader_uart_write_data(supported_commands,sizeof(supported_commands));
 8000be0:	210c      	movs	r1, #12
 8000be2:	4809      	ldr	r0, [pc, #36]	; (8000c08 <bootloader_handle_gethelp_cmd+0x70>)
 8000be4:	f7ff ff48 	bl	8000a78 <bootloader_uart_write_data>
		{
			printmsg("BL_DEBUG_MSG:checksum fail \n\r");
			bootloader_send_nack();
		}

}
 8000be8:	e004      	b.n	8000bf4 <bootloader_handle_gethelp_cmd+0x5c>
			printmsg("BL_DEBUG_MSG:checksum fail \n\r");
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <bootloader_handle_gethelp_cmd+0x74>)
 8000bec:	f7ff fef2 	bl	80009d4 <printmsg>
			bootloader_send_nack();
 8000bf0:	f7ff ff16 	bl	8000a20 <bootloader_send_nack>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	0800404c 	.word	0x0800404c
 8000c00:	20000114 	.word	0x20000114
 8000c04:	08003fec 	.word	0x08003fec
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	0800402c 	.word	0x0800402c

08000c10 <bootloader_handle_getcid_cmd>:

void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num =0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n\r");
 8000c1c:	481d      	ldr	r0, [pc, #116]	; (8000c94 <bootloader_handle_getcid_cmd+0x84>)
 8000c1e:	f7ff fed9 	bl	80009d4 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0] +1;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <bootloader_handle_getcid_cmd+0x88>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len -4));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3b04      	subs	r3, #4
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <bootloader_handle_getcid_cmd+0x88>)
 8000c30:	4413      	add	r3, r2
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3b04      	subs	r3, #4
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <bootloader_handle_getcid_cmd+0x88>)
 8000c40:	f7ff ff2e 	bl	8000aa0 <bootloader_verify_crc>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d11a      	bne.n	8000c80 <bootloader_handle_getcid_cmd+0x70>
			{
				printmsg("BL_DEBUG_MSG:checksum succes!\n\r");
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <bootloader_handle_getcid_cmd+0x8c>)
 8000c4c:	f7ff fec2 	bl	80009d4 <printmsg>
				bootloader_send_ack(bl_rx_buffer[0],2);
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <bootloader_handle_getcid_cmd+0x88>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fef4 	bl	8000a44 <bootloader_send_ack>
				bl_cid_num = get_mcu_chip_id();
 8000c5c:	f7ff fe02 	bl	8000864 <get_mcu_chip_id>
 8000c60:	4603      	mov	r3, r0
 8000c62:	81fb      	strh	r3, [r7, #14]
				printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n\r", bl_cid_num, bl_cid_num);
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	4619      	mov	r1, r3
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <bootloader_handle_getcid_cmd+0x90>)
 8000c6e:	f7ff feb1 	bl	80009d4 <printmsg>
				bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000c72:	f107 030e 	add.w	r3, r7, #14
 8000c76:	2102      	movs	r1, #2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fefd 	bl	8000a78 <bootloader_uart_write_data>
			{
				printmsg("BL_DEBUG_MSG:checksum fail \n\r");
				bootloader_send_nack();
			}

}
 8000c7e:	e004      	b.n	8000c8a <bootloader_handle_getcid_cmd+0x7a>
				printmsg("BL_DEBUG_MSG:checksum fail \n\r");
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <bootloader_handle_getcid_cmd+0x94>)
 8000c82:	f7ff fea7 	bl	80009d4 <printmsg>
				bootloader_send_nack();
 8000c86:	f7ff fecb 	bl	8000a20 <bootloader_send_nack>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	0800407c 	.word	0x0800407c
 8000c98:	20000114 	.word	0x20000114
 8000c9c:	08003fec 	.word	0x08003fec
 8000ca0:	080040a8 	.word	0x080040a8
 8000ca4:	0800402c 	.word	0x0800402c

08000ca8 <bootloader_handle_getrdp_cmd>:

void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t rdp_level = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n\r");
 8000cb4:	481d      	ldr	r0, [pc, #116]	; (8000d2c <bootloader_handle_getrdp_cmd+0x84>)
 8000cb6:	f7ff fe8d 	bl	80009d4 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0] +1;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <bootloader_handle_getrdp_cmd+0x88>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
	uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len -4));
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3b04      	subs	r3, #4
 8000cc6:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <bootloader_handle_getrdp_cmd+0x88>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	613b      	str	r3, [r7, #16]

	if (!bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4816      	ldr	r0, [pc, #88]	; (8000d30 <bootloader_handle_getrdp_cmd+0x88>)
 8000cd8:	f7ff fee2 	bl	8000aa0 <bootloader_verify_crc>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d11a      	bne.n	8000d18 <bootloader_handle_getrdp_cmd+0x70>
			{
				printmsg("BL_DEBUG_MSG:checksum succes!\n\r");
 8000ce2:	4814      	ldr	r0, [pc, #80]	; (8000d34 <bootloader_handle_getrdp_cmd+0x8c>)
 8000ce4:	f7ff fe76 	bl	80009d4 <printmsg>
				bootloader_send_ack(bl_rx_buffer[0],1);
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <bootloader_handle_getrdp_cmd+0x88>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fea8 	bl	8000a44 <bootloader_send_ack>
				rdp_level = get_flash_rdp_level();
 8000cf4:	f7ff fda2 	bl	800083c <get_flash_rdp_level>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
				printmsg("BL_DEBUG_MSG:RDP Level : %d %#x !!\n\r", rdp_level, rdp_level);
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	461a      	mov	r2, r3
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <bootloader_handle_getrdp_cmd+0x90>)
 8000d06:	f7ff fe65 	bl	80009d4 <printmsg>
				bootloader_uart_write_data(&rdp_level,1);
 8000d0a:	f107 030f 	add.w	r3, r7, #15
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff feb1 	bl	8000a78 <bootloader_uart_write_data>
			}else
			{
				printmsg("BL_DEBUG_MSG:checksum fail \n\r");
				bootloader_send_nack();
			}
}
 8000d16:	e004      	b.n	8000d22 <bootloader_handle_getrdp_cmd+0x7a>
				printmsg("BL_DEBUG_MSG:checksum fail \n\r");
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <bootloader_handle_getrdp_cmd+0x94>)
 8000d1a:	f7ff fe5b 	bl	80009d4 <printmsg>
				bootloader_send_nack();
 8000d1e:	f7ff fe7f 	bl	8000a20 <bootloader_send_nack>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	080040cc 	.word	0x080040cc
 8000d30:	20000114 	.word	0x20000114
 8000d34:	08003fec 	.word	0x08003fec
 8000d38:	080040f8 	.word	0x080040f8
 8000d3c:	0800402c 	.word	0x0800402c

08000d40 <bootloader_handle_go_cmd>:

void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint32_t go_address = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
	uint8_t addr_valid = ADDR_VALID;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_invalid = ADDR_INVALID;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73bb      	strb	r3, [r7, #14]

	printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n\r");
 8000d54:	4828      	ldr	r0, [pc, #160]	; (8000df8 <bootloader_handle_go_cmd+0xb8>)
 8000d56:	f7ff fe3d 	bl	80009d4 <printmsg>

	uint32_t command_packet_len = bl_rx_buffer[0] +1;
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <bootloader_handle_go_cmd+0xbc>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
	uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len -4));
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	3b04      	subs	r3, #4
 8000d66:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <bootloader_handle_go_cmd+0xbc>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	617b      	str	r3, [r7, #20]

	if (!bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	3b04      	subs	r3, #4
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4619      	mov	r1, r3
 8000d76:	4821      	ldr	r0, [pc, #132]	; (8000dfc <bootloader_handle_go_cmd+0xbc>)
 8000d78:	f7ff fe92 	bl	8000aa0 <bootloader_verify_crc>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d130      	bne.n	8000de4 <bootloader_handle_go_cmd+0xa4>
			{
				printmsg("BL_DEBUG_MSG:checksum succes!\n\r");
 8000d82:	481f      	ldr	r0, [pc, #124]	; (8000e00 <bootloader_handle_go_cmd+0xc0>)
 8000d84:	f7ff fe26 	bl	80009d4 <printmsg>
				bootloader_send_ack(bl_rx_buffer[0],1);
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <bootloader_handle_go_cmd+0xbc>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fe58 	bl	8000a44 <bootloader_send_ack>

				go_address = *((uint32_t *)&bl_rx_buffer[2]);
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <bootloader_handle_go_cmd+0xc4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61fb      	str	r3, [r7, #28]
				printmsg("BL_DEBUG_MSG:GO addr : %#x !!\n\r", go_address);
 8000d9a:	69f9      	ldr	r1, [r7, #28]
 8000d9c:	481a      	ldr	r0, [pc, #104]	; (8000e08 <bootloader_handle_go_cmd+0xc8>)
 8000d9e:	f7ff fe19 	bl	80009d4 <printmsg>

				if (verify_address(go_address) == ADDR_VALID)
 8000da2:	69f8      	ldr	r0, [r7, #28]
 8000da4:	f7ff fd26 	bl	80007f4 <verify_address>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d110      	bne.n	8000dd0 <bootloader_handle_go_cmd+0x90>
				{
					bootloader_uart_write_data(&addr_valid,1);
 8000dae:	f107 030f 	add.w	r3, r7, #15
 8000db2:	2101      	movs	r1, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fe5f 	bl	8000a78 <bootloader_uart_write_data>

					go_address +=1;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	61fb      	str	r3, [r7, #28]
					void (*lets_jump)(void) = (void *)go_address;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	613b      	str	r3, [r7, #16]
					printmsg("BL_DEBUG_MSG: jumping to go address! \n\r");
 8000dc4:	4811      	ldr	r0, [pc, #68]	; (8000e0c <bootloader_handle_go_cmd+0xcc>)
 8000dc6:	f7ff fe05 	bl	80009d4 <printmsg>

					lets_jump();
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4798      	blx	r3
			}else
			{
				printmsg("BL_DEBUG_MSG:checksum fail \n\r");
				bootloader_send_nack();
			}
}
 8000dce:	e00e      	b.n	8000dee <bootloader_handle_go_cmd+0xae>
					printmsg("BL_DEBUG_MSG: GO addr invalid ! \n\r");
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <bootloader_handle_go_cmd+0xd0>)
 8000dd2:	f7ff fdff 	bl	80009d4 <printmsg>
					bootloader_uart_write_data(&addr_invalid, 1);
 8000dd6:	f107 030e 	add.w	r3, r7, #14
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe4b 	bl	8000a78 <bootloader_uart_write_data>
}
 8000de2:	e004      	b.n	8000dee <bootloader_handle_go_cmd+0xae>
				printmsg("BL_DEBUG_MSG:checksum fail \n\r");
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <bootloader_handle_go_cmd+0xd4>)
 8000de6:	f7ff fdf5 	bl	80009d4 <printmsg>
				bootloader_send_nack();
 8000dea:	f7ff fe19 	bl	8000a20 <bootloader_send_nack>
}
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08004120 	.word	0x08004120
 8000dfc:	20000114 	.word	0x20000114
 8000e00:	08003fec 	.word	0x08003fec
 8000e04:	20000116 	.word	0x20000116
 8000e08:	08004148 	.word	0x08004148
 8000e0c:	08004168 	.word	0x08004168
 8000e10:	08004190 	.word	0x08004190
 8000e14:	0800402c 	.word	0x0800402c

08000e18 <bootloader_handle_flash_erase_cmd>:

void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000e24:	482a      	ldr	r0, [pc, #168]	; (8000ed0 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000e26:	f7ff fdd5 	bl	80009d4 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3b04      	subs	r3, #4
 8000e36:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3b04      	subs	r3, #4
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4823      	ldr	r0, [pc, #140]	; (8000ed4 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000e48:	f7ff fe2a 	bl	8000aa0 <bootloader_verify_crc>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d135      	bne.n	8000ebe <bootloader_handle_flash_erase_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e52:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000e54:	f7ff fdbe 	bl	80009d4 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fdf0 	bl	8000a44 <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3302      	adds	r3, #2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3303      	adds	r3, #3
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	4819      	ldr	r0, [pc, #100]	; (8000edc <bootloader_handle_flash_erase_cmd+0xc4>)
 8000e76:	f7ff fdad 	bl	80009d4 <printmsg>

        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000e80:	f001 fa44 	bl	800230c <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3302      	adds	r3, #2
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4610      	mov	r0, r2
 8000e94:	f7ff fc67 	bl	8000766 <execute_flash_erase>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000ea2:	f001 fa33 	bl	800230c <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000eac:	f7ff fd92 	bl	80009d4 <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 8000eb0:	f107 030f 	add.w	r3, r7, #15
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fdde 	bl	8000a78 <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 8000ebc:	e004      	b.n	8000ec8 <bootloader_handle_flash_erase_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000ec0:	f7ff fd88 	bl	80009d4 <printmsg>
        bootloader_send_nack();
 8000ec4:	f7ff fdac 	bl	8000a20 <bootloader_send_nack>
}
 8000ec8:	bf00      	nop
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	080041b4 	.word	0x080041b4
 8000ed4:	20000114 	.word	0x20000114
 8000ed8:	080041e4 	.word	0x080041e4
 8000edc:	08004208 	.word	0x08004208
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	0800423c 	.word	0x0800423c
 8000ee8:	08004264 	.word	0x08004264

08000eec <bootloader_handle_mem_write_cmd>:

void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	uint8_t write_status = 0x00;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]

	uint8_t payload_len = bl_rx_buffer[6];
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <bootloader_handle_mem_write_cmd+0xd0>)
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	77fb      	strb	r3, [r7, #31]

	uint32_t mem_address = *((uint32_t *) ( &bl_rx_buffer[2]) );
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <bootloader_handle_mem_write_cmd+0xd4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]


    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000f04:	482f      	ldr	r0, [pc, #188]	; (8000fc4 <bootloader_handle_mem_write_cmd+0xd8>)
 8000f06:	f7ff fd65 	bl	80009d4 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <bootloader_handle_mem_write_cmd+0xd0>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3b04      	subs	r3, #4
 8000f16:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <bootloader_handle_mem_write_cmd+0xd0>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3b04      	subs	r3, #4
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4825      	ldr	r0, [pc, #148]	; (8000fbc <bootloader_handle_mem_write_cmd+0xd0>)
 8000f28:	f7ff fdba 	bl	8000aa0 <bootloader_verify_crc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d13a      	bne.n	8000fa8 <bootloader_handle_mem_write_cmd+0xbc>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000f32:	4825      	ldr	r0, [pc, #148]	; (8000fc8 <bootloader_handle_mem_write_cmd+0xdc>)
 8000f34:	f7ff fd4e 	bl	80009d4 <printmsg>

        bootloader_send_ack(bl_rx_buffer[0],1);
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <bootloader_handle_mem_write_cmd+0xd0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fd80 	bl	8000a44 <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000f44:	69b9      	ldr	r1, [r7, #24]
 8000f46:	4821      	ldr	r0, [pc, #132]	; (8000fcc <bootloader_handle_mem_write_cmd+0xe0>)
 8000f48:	f7ff fd44 	bl	80009d4 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8000f4c:	69b8      	ldr	r0, [r7, #24]
 8000f4e:	f7ff fc51 	bl	80007f4 <verify_address>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11b      	bne.n	8000f90 <bootloader_handle_mem_write_cmd+0xa4>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8000f58:	481d      	ldr	r0, [pc, #116]	; (8000fd0 <bootloader_handle_mem_write_cmd+0xe4>)
 8000f5a:	f7ff fd3b 	bl	80009d4 <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2120      	movs	r1, #32
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <bootloader_handle_mem_write_cmd+0xe8>)
 8000f64:	f001 f9d2 	bl	800230c <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&bl_rx_buffer[7],mem_address, payload_len);
 8000f68:	7ffb      	ldrb	r3, [r7, #31]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	69b9      	ldr	r1, [r7, #24]
 8000f6e:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <bootloader_handle_mem_write_cmd+0xec>)
 8000f70:	f7ff fbcc 	bl	800070c <execute_mem_write>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <bootloader_handle_mem_write_cmd+0xe8>)
 8000f7e:	f001 f9c5 	bl	800230c <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 8000f82:	f107 030f 	add.w	r3, r7, #15
 8000f86:	2101      	movs	r1, #1
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fd75 	bl	8000a78 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8000f8e:	e010      	b.n	8000fb2 <bootloader_handle_mem_write_cmd+0xc6>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 8000f90:	4812      	ldr	r0, [pc, #72]	; (8000fdc <bootloader_handle_mem_write_cmd+0xf0>)
 8000f92:	f7ff fd1f 	bl	80009d4 <printmsg>
            write_status = ADDR_INVALID;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 8000f9a:	f107 030f 	add.w	r3, r7, #15
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fd69 	bl	8000a78 <bootloader_uart_write_data>
}
 8000fa6:	e004      	b.n	8000fb2 <bootloader_handle_mem_write_cmd+0xc6>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <bootloader_handle_mem_write_cmd+0xf4>)
 8000faa:	f7ff fd13 	bl	80009d4 <printmsg>
        bootloader_send_nack();
 8000fae:	f7ff fd37 	bl	8000a20 <bootloader_send_nack>
}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000114 	.word	0x20000114
 8000fc0:	20000116 	.word	0x20000116
 8000fc4:	08004284 	.word	0x08004284
 8000fc8:	080041e4 	.word	0x080041e4
 8000fcc:	080042b4 	.word	0x080042b4
 8000fd0:	080042dc 	.word	0x080042dc
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	2000011b 	.word	0x2000011b
 8000fdc:	08004304 	.word	0x08004304
 8000fe0:	08004264 	.word	0x08004264

08000fe4 <bootloader_handle_en_rw_protect>:

void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000ff0:	4820      	ldr	r0, [pc, #128]	; (8001074 <bootloader_handle_en_rw_protect+0x90>)
 8000ff2:	f7ff fcef 	bl	80009d4 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <bootloader_handle_en_rw_protect+0x94>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3b04      	subs	r3, #4
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <bootloader_handle_en_rw_protect+0x94>)
 8001004:	4413      	add	r3, r2
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3b04      	subs	r3, #4
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4619      	mov	r1, r3
 8001012:	4819      	ldr	r0, [pc, #100]	; (8001078 <bootloader_handle_en_rw_protect+0x94>)
 8001014:	f7ff fd44 	bl	8000aa0 <bootloader_verify_crc>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d120      	bne.n	8001060 <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <bootloader_handle_en_rw_protect+0x98>)
 8001020:	f7ff fcd8 	bl	80009d4 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd0a 	bl	8000a44 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3302      	adds	r3, #2
 8001034:	7818      	ldrb	r0, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff face 	bl	80005e0 <configure_flash_sector_rw_protection>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	4619      	mov	r1, r3
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <bootloader_handle_en_rw_protect+0x9c>)
 800104e:	f7ff fcc1 	bl	80009d4 <printmsg>

        bootloader_uart_write_data(&status,1);
 8001052:	f107 030f 	add.w	r3, r7, #15
 8001056:	2101      	movs	r1, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fd0d 	bl	8000a78 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 800105e:	e004      	b.n	800106a <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <bootloader_handle_en_rw_protect+0xa0>)
 8001062:	f7ff fcb7 	bl	80009d4 <printmsg>
        bootloader_send_nack();
 8001066:	f7ff fcdb 	bl	8000a20 <bootloader_send_nack>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	08004330 	.word	0x08004330
 8001078:	20000114 	.word	0x20000114
 800107c:	080041e4 	.word	0x080041e4
 8001080:	0800423c 	.word	0x0800423c
 8001084:	08004264 	.word	0x08004264

08001088 <bootloader_handle_mem_read>:

void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <bootloader_handle_read_sector_protection_status>:

void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <bootloader_handle_dis_rw_protect>:

void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	; 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	; 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fa46 	bl	8003578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemClock_Config+0xd0>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemClock_Config+0xd0>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemClock_Config+0xd0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <SystemClock_Config+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <SystemClock_Config+0xd4>)
 8001126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <SystemClock_Config+0xd4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800114c:	2310      	movs	r3, #16
 800114e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001150:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001156:	2304      	movs	r3, #4
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800115a:	2307      	movs	r3, #7
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f8ec 	bl	8002340 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800116e:	f000 f8f5 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2102      	movs	r1, #2
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fb4e 	bl	8002830 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800119a:	f000 f8df 	bl	800135c <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	; 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_CRC_Init+0x20>)
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <MX_CRC_Init+0x24>)
 80011b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_CRC_Init+0x20>)
 80011bc:	f000 fbaf 	bl	800191e <HAL_CRC_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80011c6:	f000 f8c9 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000084 	.word	0x20000084
 80011d4:	40023000 	.word	0x40023000

080011d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART1_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001210:	f001 fd2e 	bl	8002c70 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 f89f 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000008c 	.word	0x2000008c
 8001228:	40011000 	.word	0x40011000

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_USART2_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x4c>)
 8001264:	f001 fd04 	bl	8002c70 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f875 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000d0 	.word	0x200000d0
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <MX_GPIO_Init+0xd0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2c      	ldr	r2, [pc, #176]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a25      	ldr	r2, [pc, #148]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2120      	movs	r1, #32
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <MX_GPIO_Init+0xd4>)
 800130c:	f000 fffe 	bl	800230c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001316:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800131a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_GPIO_Init+0xd8>)
 8001328:	f000 fe54 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800132c:	2320      	movs	r3, #32
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_GPIO_Init+0xd4>)
 8001344:	f000 fe46 	bl	8001fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020800 	.word	0x40020800

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>
	...

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_MspInit+0x90>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_MspInit+0x90>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_MspInit+0x90>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <HAL_MspInit+0x90>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_MspInit+0x90>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_MspInit+0x90>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 15, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210f      	movs	r1, #15
 80013aa:	f06f 000b 	mvn.w	r0, #11
 80013ae:	f000 fa8e 	bl	80018ce <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 15, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	210f      	movs	r1, #15
 80013b6:	f06f 000a 	mvn.w	r0, #10
 80013ba:	f000 fa88 	bl	80018ce <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 15, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	210f      	movs	r1, #15
 80013c2:	f06f 0009 	mvn.w	r0, #9
 80013c6:	f000 fa82 	bl	80018ce <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0004 	mvn.w	r0, #4
 80013d2:	f000 fa7c 	bl	80018ce <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	210f      	movs	r1, #15
 80013da:	f06f 0003 	mvn.w	r0, #3
 80013de:	f000 fa76 	bl	80018ce <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	210f      	movs	r1, #15
 80013e6:	f06f 0001 	mvn.w	r0, #1
 80013ea:	f000 fa70 	bl	80018ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_CRC_MspInit+0x3c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d10d      	bne.n	800142a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_CRC_MspInit+0x40>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_CRC_MspInit+0x40>)
 8001418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_CRC_MspInit+0x40>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023000 	.word	0x40023000
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a32      	ldr	r2, [pc, #200]	; (8001528 <HAL_UART_MspInit+0xe8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d12d      	bne.n	80014be <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	4b31      	ldr	r3, [pc, #196]	; (800152c <HAL_UART_MspInit+0xec>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a30      	ldr	r2, [pc, #192]	; (800152c <HAL_UART_MspInit+0xec>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b2e      	ldr	r3, [pc, #184]	; (800152c <HAL_UART_MspInit+0xec>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <HAL_UART_MspInit+0xec>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a29      	ldr	r2, [pc, #164]	; (800152c <HAL_UART_MspInit+0xec>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_UART_MspInit+0xec>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800149a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ac:	2307      	movs	r3, #7
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	481e      	ldr	r0, [pc, #120]	; (8001530 <HAL_UART_MspInit+0xf0>)
 80014b8:	f000 fd8c 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014bc:	e030      	b.n	8001520 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <HAL_UART_MspInit+0xf4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d12b      	bne.n	8001520 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <HAL_UART_MspInit+0xec>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a16      	ldr	r2, [pc, #88]	; (800152c <HAL_UART_MspInit+0xec>)
 80014d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_UART_MspInit+0xec>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <HAL_UART_MspInit+0xec>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <HAL_UART_MspInit+0xec>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6313      	str	r3, [r2, #48]	; 0x30
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_UART_MspInit+0xec>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001500:	230c      	movs	r3, #12
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001510:	2307      	movs	r3, #7
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_UART_MspInit+0xf0>)
 800151c:	f000 fd5a 	bl	8001fd4 <HAL_GPIO_Init>
}
 8001520:	bf00      	nop
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40011000 	.word	0x40011000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40004400 	.word	0x40004400

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 f8c6 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f001 ffe4 	bl	8003588 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20018000 	.word	0x20018000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	200001dc 	.word	0x200001dc
 80015f4:	20000350 	.word	0x20000350

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Boot_Reset_Handler>:

    .section  .text.Boot_Reset_Handler
  .weak  Boot_Reset_Handler
  .type  Boot_Reset_Handler, %function
Boot_Reset_Handler:
  ldr   sp, =_estack    		 /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001622:	490e      	ldr	r1, [pc, #56]	; (800165c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001624:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001638:	4c0b      	ldr	r4, [pc, #44]	; (8001668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001646:	f7ff ffd7 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f001 ffa3 	bl	8003594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7fe ff9d 	bl	800058c <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001654:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001660:	080043c0 	.word	0x080043c0
  ldr r2, =_sbss
 8001664:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001668:	2000034c 	.word	0x2000034c

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f90d 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	2000      	movs	r0, #0
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fe60 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f917 	bl	8001906 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f8ed 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000000c 	.word	0x2000000c
 800170c:	20000014 	.word	0x20000014
 8001710:	20000010 	.word	0x20000010

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000014 	.word	0x20000014
 8001738:	200001e0 	.word	0x200001e0

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200001e0 	.word	0x200001e0

08001754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
         );
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff8e 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff47 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff5c 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff8e 	bl	800180c <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffb0 	bl	8001874 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e00e      	b.n	800194e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	795b      	ldrb	r3, [r3, #5]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fd5b 	bl	80013fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001956:	b480      	push	{r7}
 8001958:	b087      	sub	sp, #28
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2202      	movs	r2, #2
 800196a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e00a      	b.n	8001988 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	441a      	add	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	d3f0      	bcc.n	8001972 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800199e:	693b      	ldr	r3, [r7, #16]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_FLASH_Program+0xa0>)
 80019c0:	7e1b      	ldrb	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_FLASH_Program+0x1e>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e03b      	b.n	8001a42 <HAL_FLASH_Program+0x96>
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_FLASH_Program+0xa0>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019d4:	f000 f89c 	bl	8001b10 <FLASH_WaitForLastOperation>
 80019d8:	4603      	mov	r3, r0
 80019da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d12b      	bne.n	8001a3a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019e8:	783b      	ldrb	r3, [r7, #0]
 80019ea:	4619      	mov	r1, r3
 80019ec:	68b8      	ldr	r0, [r7, #8]
 80019ee:	f000 f947 	bl	8001c80 <FLASH_Program_Byte>
 80019f2:	e016      	b.n	8001a22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019fa:	883b      	ldrh	r3, [r7, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	68b8      	ldr	r0, [r7, #8]
 8001a00:	f000 f91a 	bl	8001c38 <FLASH_Program_HalfWord>
 8001a04:	e00d      	b.n	8001a22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d105      	bne.n	8001a18 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	68b8      	ldr	r0, [r7, #8]
 8001a12:	f000 f8ef 	bl	8001bf4 <FLASH_Program_Word>
 8001a16:	e004      	b.n	8001a22 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f000 f8b7 	bl	8001b90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a26:	f000 f873 	bl	8001b10 <FLASH_WaitForLastOperation>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_FLASH_Program+0xa4>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_FLASH_Program+0xa4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_FLASH_Program+0xa0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200001e4 	.word	0x200001e4
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	da0b      	bge.n	8001a7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_FLASH_Unlock+0x3c>)
 8001a6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_FLASH_Unlock+0x40>)
 8001a70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da01      	bge.n	8001a7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40023c00 	.word	0x40023c00
 8001a90:	45670123 	.word	0x45670123
 8001a94:	cdef89ab 	.word	0xcdef89ab

08001a98 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_FLASH_Lock+0x1c>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_FLASH_Lock+0x1c>)
 8001aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aa6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_FLASH_OB_Unlock+0x2c>)
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_FLASH_OB_Unlock+0x2c>)
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_FLASH_OB_Unlock+0x30>)
 8001acc:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001ace:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_FLASH_OB_Unlock+0x2c>)
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_FLASH_OB_Unlock+0x34>)
 8001ad2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e000      	b.n	8001ada <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40023c00 	.word	0x40023c00
 8001ae8:	08192a3b 	.word	0x08192a3b
 8001aec:	4c5d6e7f 	.word	0x4c5d6e7f

08001af0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_FLASH_OB_Lock+0x1c>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_FLASH_OB_Lock+0x1c>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40023c00 	.word	0x40023c00

08001b10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <FLASH_WaitForLastOperation+0x78>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b22:	f7ff fe0b 	bl	800173c <HAL_GetTick>
 8001b26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b28:	e010      	b.n	8001b4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d00c      	beq.n	8001b4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <FLASH_WaitForLastOperation+0x38>
 8001b38:	f7ff fe00 	bl	800173c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d201      	bcs.n	8001b4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e019      	b.n	8001b80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <FLASH_WaitForLastOperation+0x7c>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e8      	bne.n	8001b2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <FLASH_WaitForLastOperation+0x7c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <FLASH_WaitForLastOperation+0x7c>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <FLASH_WaitForLastOperation+0x7c>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b76:	f000 f8a5 	bl	8001cc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
  
}  
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200001e4 	.word	0x200001e4
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <FLASH_Program_DoubleWord+0x60>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <FLASH_Program_DoubleWord+0x60>)
 8001ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <FLASH_Program_DoubleWord+0x60>)
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <FLASH_Program_DoubleWord+0x60>)
 8001bae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <FLASH_Program_DoubleWord+0x60>)
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <FLASH_Program_DoubleWord+0x60>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001bc6:	f3bf 8f6f 	isb	sy
}
 8001bca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	000a      	movs	r2, r1
 8001bda:	2300      	movs	r3, #0
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	3104      	adds	r1, #4
 8001be0:	4613      	mov	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <FLASH_Program_Word+0x40>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	4a0c      	ldr	r2, [pc, #48]	; (8001c34 <FLASH_Program_Word+0x40>)
 8001c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <FLASH_Program_Word+0x40>)
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <FLASH_Program_Word+0x40>)
 8001c10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <FLASH_Program_Word+0x40>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <FLASH_Program_Word+0x40>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <FLASH_Program_HalfWord+0x44>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <FLASH_Program_HalfWord+0x44>)
 8001c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <FLASH_Program_HalfWord+0x44>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <FLASH_Program_HalfWord+0x44>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c5c:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <FLASH_Program_HalfWord+0x44>)
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <FLASH_Program_HalfWord+0x44>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	801a      	strh	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <FLASH_Program_Byte+0x40>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <FLASH_Program_Byte+0x40>)
 8001c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <FLASH_Program_Byte+0x40>)
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <FLASH_Program_Byte+0x40>)
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <FLASH_Program_Byte+0x40>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <FLASH_Program_Byte+0x40>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	78fa      	ldrb	r2, [r7, #3]
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	f043 0310 	orr.w	r3, r3, #16
 8001cdc:	4a2b      	ldr	r2, [pc, #172]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001cde:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001ce2:	2210      	movs	r2, #16
 8001ce4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001cfc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cfe:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d00:	2220      	movs	r2, #32
 8001d02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	f043 0320 	orr.w	r3, r3, #32
 8001d74:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <FLASH_SetErrorCode+0xc8>)
 8001d76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <FLASH_SetErrorCode+0xc4>)
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	60da      	str	r2, [r3, #12]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40023c00 	.word	0x40023c00
 8001d8c:	200001e4 	.word	0x200001e4

08001d90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_FLASHEx_Erase+0xd8>)
 8001da4:	7e1b      	ldrb	r3, [r3, #24]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_FLASHEx_Erase+0x1e>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e058      	b.n	8001e60 <HAL_FLASHEx_Erase+0xd0>
 8001dae:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_FLASHEx_Erase+0xd8>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db8:	f7ff feaa 	bl	8001b10 <FLASH_WaitForLastOperation>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d148      	bne.n	8001e58 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d115      	bne.n	8001e02 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f000 f844 	bl	8001e70 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001de8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dec:	f7ff fe90 	bl	8001b10 <FLASH_WaitForLastOperation>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_FLASHEx_Erase+0xdc>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_FLASHEx_Erase+0xdc>)
 8001dfa:	f023 0304 	bic.w	r3, r3, #4
 8001dfe:	6113      	str	r3, [r2, #16]
 8001e00:	e028      	b.n	8001e54 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	e01c      	b.n	8001e44 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	68b8      	ldr	r0, [r7, #8]
 8001e14:	f000 f850 	bl	8001eb8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e1c:	f7ff fe78 	bl	8001b10 <FLASH_WaitForLastOperation>
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_FLASHEx_Erase+0xdc>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_FLASHEx_Erase+0xdc>)
 8001e2a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001e2e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	601a      	str	r2, [r3, #0]
          break;
 8001e3c:	e00a      	b.n	8001e54 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d3da      	bcc.n	8001e0a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001e54:	f000 f878 	bl	8001f48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_FLASHEx_Erase+0xd8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	761a      	strb	r2, [r3, #24]

  return status;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200001e4 	.word	0x200001e4
 8001e6c:	40023c00 	.word	0x40023c00

08001e70 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <FLASH_MassErase+0x44>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <FLASH_MassErase+0x44>)
 8001e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e88:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <FLASH_MassErase+0x44>)
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <FLASH_MassErase+0x44>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <FLASH_MassErase+0x44>)
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	021b      	lsls	r3, r3, #8
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <FLASH_MassErase+0x44>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6113      	str	r3, [r2, #16]
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	e010      	b.n	8001ef6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d103      	bne.n	8001ee2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e009      	b.n	8001ef6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d103      	bne.n	8001ef0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	e002      	b.n	8001ef6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ef0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	490f      	ldr	r1, [pc, #60]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <FLASH_Erase_Sector+0x8c>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f36:	6113      	str	r3, [r2, #16]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d017      	beq.n	8001f88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001f58:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d017      	beq.n	8001fc4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001f9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001fb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <FLASH_FlushCaches+0x88>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
 8001fee:	e159      	b.n	80022a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8148 	bne.w	800229e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d005      	beq.n	8002026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	2b02      	cmp	r3, #2
 8002024:	d130      	bne.n	8002088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 0201 	and.w	r2, r3, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b03      	cmp	r3, #3
 8002092:	d017      	beq.n	80020c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	2203      	movs	r2, #3
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d123      	bne.n	8002118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	220f      	movs	r2, #15
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	69b9      	ldr	r1, [r7, #24]
 8002114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a2 	beq.w	800229e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_GPIO_Init+0x2e8>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a56      	ldr	r2, [pc, #344]	; (80022bc <HAL_GPIO_Init+0x2e8>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b54      	ldr	r3, [pc, #336]	; (80022bc <HAL_GPIO_Init+0x2e8>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002176:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_GPIO_Init+0x2ec>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a49      	ldr	r2, [pc, #292]	; (80022c4 <HAL_GPIO_Init+0x2f0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x202>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a48      	ldr	r2, [pc, #288]	; (80022c8 <HAL_GPIO_Init+0x2f4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x1fe>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a47      	ldr	r2, [pc, #284]	; (80022cc <HAL_GPIO_Init+0x2f8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x1fa>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a46      	ldr	r2, [pc, #280]	; (80022d0 <HAL_GPIO_Init+0x2fc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x1f6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a45      	ldr	r2, [pc, #276]	; (80022d4 <HAL_GPIO_Init+0x300>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x1f2>
 80021c2:	2304      	movs	r3, #4
 80021c4:	e008      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e004      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e002      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x204>
 80021d6:	2300      	movs	r3, #0
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	f002 0203 	and.w	r2, r2, #3
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	4093      	lsls	r3, r2
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e8:	4935      	ldr	r1, [pc, #212]	; (80022c0 <HAL_GPIO_Init+0x2ec>)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_GPIO_Init+0x304>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221a:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x304>)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_GPIO_Init+0x304>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_GPIO_Init+0x304>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_GPIO_Init+0x304>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3301      	adds	r3, #1
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	f67f aea2 	bls.w	8001ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	e001      	b.n	80022fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
 8002318:	4613      	mov	r3, r2
 800231a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002322:	887a      	ldrh	r2, [r7, #2]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002328:	e003      	b.n	8002332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800232a:	887b      	ldrh	r3, [r7, #2]
 800232c:	041a      	lsls	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e267      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d075      	beq.n	800244a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800235e:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d00c      	beq.n	8002384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236a:	4b85      	ldr	r3, [pc, #532]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002372:	2b08      	cmp	r3, #8
 8002374:	d112      	bne.n	800239c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002376:	4b82      	ldr	r3, [pc, #520]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002382:	d10b      	bne.n	800239c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d05b      	beq.n	8002448 <HAL_RCC_OscConfig+0x108>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d157      	bne.n	8002448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e242      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d106      	bne.n	80023b4 <HAL_RCC_OscConfig+0x74>
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6f      	ldr	r2, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6c      	ldr	r2, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023d8:	4b69      	ldr	r3, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a68      	ldr	r2, [pc, #416]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f9a0 	bl	800173c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff f99c 	bl	800173c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e207      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xc0>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff f98c 	bl	800173c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f988 	bl	800173c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1f3      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b51      	ldr	r3, [pc, #324]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0xe8>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d063      	beq.n	800251e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246a:	2b08      	cmp	r3, #8
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x152>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1c7      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e03a      	b.n	800251e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCC_OscConfig+0x244>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7ff f941 	bl	800173c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f93d 	bl	800173c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1a8      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4925      	ldr	r1, [pc, #148]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x244>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff f920 	bl	800173c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff f91c 	bl	800173c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e187      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d036      	beq.n	8002598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x248>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff f900 	bl	800173c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7ff f8fc 	bl	800173c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e167      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x200>
 800255e:	e01b      	b.n	8002598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_OscConfig+0x248>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7ff f8e9 	bl	800173c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	e00e      	b.n	800258c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256e:	f7ff f8e5 	bl	800173c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d907      	bls.n	800258c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e150      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
 8002580:	40023800 	.word	0x40023800
 8002584:	42470000 	.word	0x42470000
 8002588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ea      	bne.n	800256e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8097 	beq.w	80026d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b7d      	ldr	r3, [pc, #500]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a7c      	ldr	r2, [pc, #496]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b7a      	ldr	r3, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b77      	ldr	r3, [pc, #476]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b74      	ldr	r3, [pc, #464]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a73      	ldr	r2, [pc, #460]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7ff f8a5 	bl	800173c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7ff f8a1 	bl	800173c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e10c      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x2ea>
 800261c:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a63      	ldr	r2, [pc, #396]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	e01c      	b.n	8002664 <HAL_RCC_OscConfig+0x324>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x30c>
 8002632:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a5e      	ldr	r2, [pc, #376]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a5b      	ldr	r2, [pc, #364]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0x324>
 800264c:	4b58      	ldr	r3, [pc, #352]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a57      	ldr	r2, [pc, #348]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a54      	ldr	r2, [pc, #336]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f866 	bl	800173c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7ff f862 	bl	800173c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0cb      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ee      	beq.n	8002674 <HAL_RCC_OscConfig+0x334>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff f850 	bl	800173c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7ff f84c 	bl	800173c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0b5      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ee      	bne.n	80026a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a38      	ldr	r2, [pc, #224]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a1 	beq.w	8002820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026de:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d05c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d141      	bne.n	8002776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_RCC_OscConfig+0x478>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f820 	bl	800173c <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7ff f81c 	bl	800173c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e087      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	3b01      	subs	r3, #1
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	491b      	ldr	r1, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x478>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7fe fff5 	bl	800173c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe fff1 	bl	800173c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e05c      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x416>
 8002774:	e054      	b.n	8002820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_RCC_OscConfig+0x478>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe ffde 	bl	800173c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe ffda 	bl	800173c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e045      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x444>
 80027a2:	e03d      	b.n	8002820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e038      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000
 80027b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x4ec>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d028      	beq.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d121      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d11a      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ec:	4013      	ands	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d111      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	3b01      	subs	r3, #1
 8002806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0cc      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d90c      	bls.n	800286c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0b8      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a58      	ldr	r2, [pc, #352]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800288e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d044      	beq.n	8002950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d119      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e07f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d003      	beq.n	80028ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e067      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 0203 	bic.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4934      	ldr	r1, [pc, #208]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002920:	f7fe ff0c 	bl	800173c <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	e00a      	b.n	800293e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002928:	f7fe ff08 	bl	800173c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e04f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 020c 	and.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1eb      	bne.n	8002928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d20c      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e032      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4916      	ldr	r1, [pc, #88]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b6:	f000 f821 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	490a      	ldr	r1, [pc, #40]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fe6c 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08004364 	.word	0x08004364
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	20000010 	.word	0x20000010

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a00:	b094      	sub	sp, #80	; 0x50
 8002a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	647b      	str	r3, [r7, #68]	; 0x44
 8002a08:	2300      	movs	r3, #0
 8002a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a14:	4b79      	ldr	r3, [pc, #484]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d00d      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x40>
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	f200 80e1 	bhi.w	8002be8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x34>
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a2e:	e0db      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b73      	ldr	r3, [pc, #460]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a34:	e0db      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a36:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a3a:	e0d8      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a3c:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a46:	4b6d      	ldr	r3, [pc, #436]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d063      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	2200      	movs	r2, #0
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a64:	633b      	str	r3, [r7, #48]	; 0x30
 8002a66:	2300      	movs	r3, #0
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a6e:	4622      	mov	r2, r4
 8002a70:	462b      	mov	r3, r5
 8002a72:	f04f 0000 	mov.w	r0, #0
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	0159      	lsls	r1, r3, #5
 8002a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a80:	0150      	lsls	r0, r2, #5
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4621      	mov	r1, r4
 8002a88:	1a51      	subs	r1, r2, r1
 8002a8a:	6139      	str	r1, [r7, #16]
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aa0:	4659      	mov	r1, fp
 8002aa2:	018b      	lsls	r3, r1, #6
 8002aa4:	4651      	mov	r1, sl
 8002aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aaa:	4651      	mov	r1, sl
 8002aac:	018a      	lsls	r2, r1, #6
 8002aae:	4651      	mov	r1, sl
 8002ab0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	eb63 0901 	sbc.w	r9, r3, r1
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ace:	4690      	mov	r8, r2
 8002ad0:	4699      	mov	r9, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	eb18 0303 	adds.w	r3, r8, r3
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	462b      	mov	r3, r5
 8002adc:	eb49 0303 	adc.w	r3, r9, r3
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aee:	4629      	mov	r1, r5
 8002af0:	024b      	lsls	r3, r1, #9
 8002af2:	4621      	mov	r1, r4
 8002af4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002af8:	4621      	mov	r1, r4
 8002afa:	024a      	lsls	r2, r1, #9
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b02:	2200      	movs	r2, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b0c:	f7fd fbc0 	bl	8000290 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4613      	mov	r3, r2
 8002b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b18:	e058      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	099b      	lsrs	r3, r3, #6
 8002b20:	2200      	movs	r2, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	4611      	mov	r1, r2
 8002b26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b34:	4642      	mov	r2, r8
 8002b36:	464b      	mov	r3, r9
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	0159      	lsls	r1, r3, #5
 8002b42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b46:	0150      	lsls	r0, r2, #5
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b52:	4649      	mov	r1, r9
 8002b54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b70:	eb63 050b 	sbc.w	r5, r3, fp
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	00eb      	lsls	r3, r5, #3
 8002b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b82:	00e2      	lsls	r2, r4, #3
 8002b84:	4614      	mov	r4, r2
 8002b86:	461d      	mov	r5, r3
 8002b88:	4643      	mov	r3, r8
 8002b8a:	18e3      	adds	r3, r4, r3
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	464b      	mov	r3, r9
 8002b90:	eb45 0303 	adc.w	r3, r5, r3
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	028b      	lsls	r3, r1, #10
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bac:	4621      	mov	r1, r4
 8002bae:	028a      	lsls	r2, r1, #10
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	61fa      	str	r2, [r7, #28]
 8002bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc0:	f7fd fb66 	bl	8000290 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be6:	e002      	b.n	8002bee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3750      	adds	r7, #80	; 0x50
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	00f42400 	.word	0x00f42400
 8002c04:	007a1200 	.word	0x007a1200

08002c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000000c 	.word	0x2000000c

08002c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c24:	f7ff fff0 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0a9b      	lsrs	r3, r3, #10
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	08004374 	.word	0x08004374

08002c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c4c:	f7ff ffdc 	bl	8002c08 <HAL_RCC_GetHCLKFreq>
 8002c50:	4602      	mov	r2, r0
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	0b5b      	lsrs	r3, r3, #13
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	4903      	ldr	r1, [pc, #12]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5e:	5ccb      	ldrb	r3, [r1, r3]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08004374 	.word	0x08004374

08002c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e03f      	b.n	8002d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fbd2 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	; 0x24
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f9cb 	bl	8003050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b08a      	sub	sp, #40	; 0x28
 8002d0e:	af02      	add	r7, sp, #8
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d17c      	bne.n	8002e24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <HAL_UART_Transmit+0x2c>
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e075      	b.n	8002e26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_UART_Transmit+0x3e>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e06e      	b.n	8002e26 <HAL_UART_Transmit+0x11c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2221      	movs	r2, #33	; 0x21
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fced 	bl	800173c <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	88fa      	ldrh	r2, [r7, #6]
 8002d6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d78:	d108      	bne.n	8002d8c <HAL_UART_Transmit+0x82>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	e003      	b.n	8002d94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d9c:	e02a      	b.n	8002df4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2180      	movs	r1, #128	; 0x80
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f8e2 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e036      	b.n	8002e26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	61bb      	str	r3, [r7, #24]
 8002dd4:	e007      	b.n	8002de6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	781a      	ldrb	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	3301      	adds	r3, #1
 8002de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1cf      	bne.n	8002d9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2140      	movs	r1, #64	; 0x40
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f8b2 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e006      	b.n	8002e26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e000      	b.n	8002e26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
  }
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08a      	sub	sp, #40	; 0x28
 8002e32:	af02      	add	r7, sp, #8
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	f040 808c 	bne.w	8002f68 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_UART_Receive+0x2e>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e084      	b.n	8002f6a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Receive+0x40>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e07d      	b.n	8002f6a <HAL_UART_Receive+0x13c>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2222      	movs	r2, #34	; 0x22
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8a:	f7fe fc57 	bl	800173c <HAL_GetTick>
 8002e8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	88fa      	ldrh	r2, [r7, #6]
 8002e94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea4:	d108      	bne.n	8002eb8 <HAL_UART_Receive+0x8a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	e003      	b.n	8002ec0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ec8:	e043      	b.n	8002f52 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f84c 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e042      	b.n	8002f6a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	3302      	adds	r3, #2
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e01f      	b.n	8002f44 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d007      	beq.n	8002f1e <HAL_UART_Receive+0xf0>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_UART_Receive+0xfe>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e008      	b.n	8002f3e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1b6      	bne.n	8002eca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b090      	sub	sp, #64	; 0x40
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f82:	e050      	b.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d04c      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f92:	f7fe fbd3 	bl	800173c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d241      	bcs.n	8003026 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fc2:	637a      	str	r2, [r7, #52]	; 0x34
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3314      	adds	r3, #20
 8002ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ff6:	623a      	str	r2, [r7, #32]
 8002ff8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	69f9      	ldr	r1, [r7, #28]
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	61bb      	str	r3, [r7, #24]
   return(result);
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e5      	bne.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e00f      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	429a      	cmp	r2, r3
 8003042:	d09f      	beq.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3740      	adds	r7, #64	; 0x40
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b0c0      	sub	sp, #256	; 0x100
 8003056:	af00      	add	r7, sp, #0
 8003058:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306c:	68d9      	ldr	r1, [r3, #12]
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	ea40 0301 	orr.w	r3, r0, r1
 8003078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800307a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	431a      	orrs	r2, r3
 8003088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	431a      	orrs	r2, r3
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030a8:	f021 010c 	bic.w	r1, r1, #12
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030b6:	430b      	orrs	r3, r1
 80030b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	6999      	ldr	r1, [r3, #24]
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	ea40 0301 	orr.w	r3, r0, r1
 80030d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b8f      	ldr	r3, [pc, #572]	; (800331c <UART_SetConfig+0x2cc>)
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d005      	beq.n	80030f0 <UART_SetConfig+0xa0>
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b8d      	ldr	r3, [pc, #564]	; (8003320 <UART_SetConfig+0x2d0>)
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d104      	bne.n	80030fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030f0:	f7ff fdaa 	bl	8002c48 <HAL_RCC_GetPCLK2Freq>
 80030f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80030f8:	e003      	b.n	8003102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030fa:	f7ff fd91 	bl	8002c20 <HAL_RCC_GetPCLK1Freq>
 80030fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310c:	f040 810c 	bne.w	8003328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003114:	2200      	movs	r2, #0
 8003116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800311a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800311e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003122:	4622      	mov	r2, r4
 8003124:	462b      	mov	r3, r5
 8003126:	1891      	adds	r1, r2, r2
 8003128:	65b9      	str	r1, [r7, #88]	; 0x58
 800312a:	415b      	adcs	r3, r3
 800312c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003132:	4621      	mov	r1, r4
 8003134:	eb12 0801 	adds.w	r8, r2, r1
 8003138:	4629      	mov	r1, r5
 800313a:	eb43 0901 	adc.w	r9, r3, r1
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	4623      	mov	r3, r4
 8003158:	eb18 0303 	adds.w	r3, r8, r3
 800315c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003160:	462b      	mov	r3, r5
 8003162:	eb49 0303 	adc.w	r3, r9, r3
 8003166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800316a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003176:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800317a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800317e:	460b      	mov	r3, r1
 8003180:	18db      	adds	r3, r3, r3
 8003182:	653b      	str	r3, [r7, #80]	; 0x50
 8003184:	4613      	mov	r3, r2
 8003186:	eb42 0303 	adc.w	r3, r2, r3
 800318a:	657b      	str	r3, [r7, #84]	; 0x54
 800318c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003194:	f7fd f87c 	bl	8000290 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4b61      	ldr	r3, [pc, #388]	; (8003324 <UART_SetConfig+0x2d4>)
 800319e:	fba3 2302 	umull	r2, r3, r3, r2
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	011c      	lsls	r4, r3, #4
 80031a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	64b9      	str	r1, [r7, #72]	; 0x48
 80031c0:	415b      	adcs	r3, r3
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031c8:	4641      	mov	r1, r8
 80031ca:	eb12 0a01 	adds.w	sl, r2, r1
 80031ce:	4649      	mov	r1, r9
 80031d0:	eb43 0b01 	adc.w	fp, r3, r1
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e8:	4692      	mov	sl, r2
 80031ea:	469b      	mov	fp, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	eb1a 0303 	adds.w	r3, sl, r3
 80031f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031f6:	464b      	mov	r3, r9
 80031f8:	eb4b 0303 	adc.w	r3, fp, r3
 80031fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800320c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003214:	460b      	mov	r3, r1
 8003216:	18db      	adds	r3, r3, r3
 8003218:	643b      	str	r3, [r7, #64]	; 0x40
 800321a:	4613      	mov	r3, r2
 800321c:	eb42 0303 	adc.w	r3, r2, r3
 8003220:	647b      	str	r3, [r7, #68]	; 0x44
 8003222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800322a:	f7fd f831 	bl	8000290 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4611      	mov	r1, r2
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <UART_SetConfig+0x2d4>)
 8003236:	fba3 2301 	umull	r2, r3, r3, r1
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2264      	movs	r2, #100	; 0x64
 800323e:	fb02 f303 	mul.w	r3, r2, r3
 8003242:	1acb      	subs	r3, r1, r3
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <UART_SetConfig+0x2d4>)
 800324c:	fba3 2302 	umull	r2, r3, r3, r2
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003258:	441c      	add	r4, r3
 800325a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003264:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	1891      	adds	r1, r2, r2
 8003272:	63b9      	str	r1, [r7, #56]	; 0x38
 8003274:	415b      	adcs	r3, r3
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800327c:	4641      	mov	r1, r8
 800327e:	1851      	adds	r1, r2, r1
 8003280:	6339      	str	r1, [r7, #48]	; 0x30
 8003282:	4649      	mov	r1, r9
 8003284:	414b      	adcs	r3, r1
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003294:	4659      	mov	r1, fp
 8003296:	00cb      	lsls	r3, r1, #3
 8003298:	4651      	mov	r1, sl
 800329a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800329e:	4651      	mov	r1, sl
 80032a0:	00ca      	lsls	r2, r1, #3
 80032a2:	4610      	mov	r0, r2
 80032a4:	4619      	mov	r1, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	4642      	mov	r2, r8
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b0:	464b      	mov	r3, r9
 80032b2:	460a      	mov	r2, r1
 80032b4:	eb42 0303 	adc.w	r3, r2, r3
 80032b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032d0:	460b      	mov	r3, r1
 80032d2:	18db      	adds	r3, r3, r3
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d6:	4613      	mov	r3, r2
 80032d8:	eb42 0303 	adc.w	r3, r2, r3
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032e6:	f7fc ffd3 	bl	8000290 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <UART_SetConfig+0x2d4>)
 80032f0:	fba3 1302 	umull	r1, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	2164      	movs	r1, #100	; 0x64
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	3332      	adds	r3, #50	; 0x32
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <UART_SetConfig+0x2d4>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	f003 0207 	and.w	r2, r3, #7
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4422      	add	r2, r4
 8003316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003318:	e106      	b.n	8003528 <UART_SetConfig+0x4d8>
 800331a:	bf00      	nop
 800331c:	40011000 	.word	0x40011000
 8003320:	40011400 	.word	0x40011400
 8003324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800332c:	2200      	movs	r2, #0
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800333a:	4642      	mov	r2, r8
 800333c:	464b      	mov	r3, r9
 800333e:	1891      	adds	r1, r2, r2
 8003340:	6239      	str	r1, [r7, #32]
 8003342:	415b      	adcs	r3, r3
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
 8003346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800334a:	4641      	mov	r1, r8
 800334c:	1854      	adds	r4, r2, r1
 800334e:	4649      	mov	r1, r9
 8003350:	eb43 0501 	adc.w	r5, r3, r1
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	00eb      	lsls	r3, r5, #3
 800335e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003362:	00e2      	lsls	r2, r4, #3
 8003364:	4614      	mov	r4, r2
 8003366:	461d      	mov	r5, r3
 8003368:	4643      	mov	r3, r8
 800336a:	18e3      	adds	r3, r4, r3
 800336c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003370:	464b      	mov	r3, r9
 8003372:	eb45 0303 	adc.w	r3, r5, r3
 8003376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800337a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003396:	4629      	mov	r1, r5
 8003398:	008b      	lsls	r3, r1, #2
 800339a:	4621      	mov	r1, r4
 800339c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a0:	4621      	mov	r1, r4
 80033a2:	008a      	lsls	r2, r1, #2
 80033a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033a8:	f7fc ff72 	bl	8000290 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4b60      	ldr	r3, [pc, #384]	; (8003534 <UART_SetConfig+0x4e4>)
 80033b2:	fba3 2302 	umull	r2, r3, r3, r2
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	011c      	lsls	r4, r3, #4
 80033ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	61b9      	str	r1, [r7, #24]
 80033d4:	415b      	adcs	r3, r3
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033dc:	4641      	mov	r1, r8
 80033de:	1851      	adds	r1, r2, r1
 80033e0:	6139      	str	r1, [r7, #16]
 80033e2:	4649      	mov	r1, r9
 80033e4:	414b      	adcs	r3, r1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033f4:	4659      	mov	r1, fp
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4651      	mov	r1, sl
 80033fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fe:	4651      	mov	r1, sl
 8003400:	00ca      	lsls	r2, r1, #3
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	4603      	mov	r3, r0
 8003408:	4642      	mov	r2, r8
 800340a:	189b      	adds	r3, r3, r2
 800340c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003410:	464b      	mov	r3, r9
 8003412:	460a      	mov	r2, r1
 8003414:	eb42 0303 	adc.w	r3, r2, r3
 8003418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	67bb      	str	r3, [r7, #120]	; 0x78
 8003426:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003434:	4649      	mov	r1, r9
 8003436:	008b      	lsls	r3, r1, #2
 8003438:	4641      	mov	r1, r8
 800343a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343e:	4641      	mov	r1, r8
 8003440:	008a      	lsls	r2, r1, #2
 8003442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003446:	f7fc ff23 	bl	8000290 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4611      	mov	r1, r2
 8003450:	4b38      	ldr	r3, [pc, #224]	; (8003534 <UART_SetConfig+0x4e4>)
 8003452:	fba3 2301 	umull	r2, r3, r3, r1
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2264      	movs	r2, #100	; 0x64
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	3332      	adds	r3, #50	; 0x32
 8003464:	4a33      	ldr	r2, [pc, #204]	; (8003534 <UART_SetConfig+0x4e4>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003470:	441c      	add	r4, r3
 8003472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003476:	2200      	movs	r2, #0
 8003478:	673b      	str	r3, [r7, #112]	; 0x70
 800347a:	677a      	str	r2, [r7, #116]	; 0x74
 800347c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	1891      	adds	r1, r2, r2
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	415b      	adcs	r3, r3
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003490:	4641      	mov	r1, r8
 8003492:	1851      	adds	r1, r2, r1
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	4649      	mov	r1, r9
 8003498:	414b      	adcs	r3, r1
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034a8:	4659      	mov	r1, fp
 80034aa:	00cb      	lsls	r3, r1, #3
 80034ac:	4651      	mov	r1, sl
 80034ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b2:	4651      	mov	r1, sl
 80034b4:	00ca      	lsls	r2, r1, #3
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	4642      	mov	r2, r8
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80034c2:	464b      	mov	r3, r9
 80034c4:	460a      	mov	r2, r1
 80034c6:	eb42 0303 	adc.w	r3, r2, r3
 80034ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	663b      	str	r3, [r7, #96]	; 0x60
 80034d6:	667a      	str	r2, [r7, #100]	; 0x64
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034e4:	4649      	mov	r1, r9
 80034e6:	008b      	lsls	r3, r1, #2
 80034e8:	4641      	mov	r1, r8
 80034ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ee:	4641      	mov	r1, r8
 80034f0:	008a      	lsls	r2, r1, #2
 80034f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80034f6:	f7fc fecb 	bl	8000290 <__aeabi_uldivmod>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <UART_SetConfig+0x4e4>)
 8003500:	fba3 1302 	umull	r1, r3, r3, r2
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	2164      	movs	r1, #100	; 0x64
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	3332      	adds	r3, #50	; 0x32
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <UART_SetConfig+0x4e4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f003 020f 	and.w	r2, r3, #15
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4422      	add	r2, r4
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003534:	51eb851f 	.word	0x51eb851f

08003538 <_vsiprintf_r>:
 8003538:	b500      	push	{lr}
 800353a:	b09b      	sub	sp, #108	; 0x6c
 800353c:	9100      	str	r1, [sp, #0]
 800353e:	9104      	str	r1, [sp, #16]
 8003540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003544:	9105      	str	r1, [sp, #20]
 8003546:	9102      	str	r1, [sp, #8]
 8003548:	4905      	ldr	r1, [pc, #20]	; (8003560 <_vsiprintf_r+0x28>)
 800354a:	9103      	str	r1, [sp, #12]
 800354c:	4669      	mov	r1, sp
 800354e:	f000 f999 	bl	8003884 <_svfiprintf_r>
 8003552:	9b00      	ldr	r3, [sp, #0]
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
 8003558:	b01b      	add	sp, #108	; 0x6c
 800355a:	f85d fb04 	ldr.w	pc, [sp], #4
 800355e:	bf00      	nop
 8003560:	ffff0208 	.word	0xffff0208

08003564 <vsiprintf>:
 8003564:	4613      	mov	r3, r2
 8003566:	460a      	mov	r2, r1
 8003568:	4601      	mov	r1, r0
 800356a:	4802      	ldr	r0, [pc, #8]	; (8003574 <vsiprintf+0x10>)
 800356c:	6800      	ldr	r0, [r0, #0]
 800356e:	f7ff bfe3 	b.w	8003538 <_vsiprintf_r>
 8003572:	bf00      	nop
 8003574:	20000064 	.word	0x20000064

08003578 <memset>:
 8003578:	4402      	add	r2, r0
 800357a:	4603      	mov	r3, r0
 800357c:	4293      	cmp	r3, r2
 800357e:	d100      	bne.n	8003582 <memset+0xa>
 8003580:	4770      	bx	lr
 8003582:	f803 1b01 	strb.w	r1, [r3], #1
 8003586:	e7f9      	b.n	800357c <memset+0x4>

08003588 <__errno>:
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <__errno+0x8>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000064 	.word	0x20000064

08003594 <__libc_init_array>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	4d0d      	ldr	r5, [pc, #52]	; (80035cc <__libc_init_array+0x38>)
 8003598:	4c0d      	ldr	r4, [pc, #52]	; (80035d0 <__libc_init_array+0x3c>)
 800359a:	1b64      	subs	r4, r4, r5
 800359c:	10a4      	asrs	r4, r4, #2
 800359e:	2600      	movs	r6, #0
 80035a0:	42a6      	cmp	r6, r4
 80035a2:	d109      	bne.n	80035b8 <__libc_init_array+0x24>
 80035a4:	4d0b      	ldr	r5, [pc, #44]	; (80035d4 <__libc_init_array+0x40>)
 80035a6:	4c0c      	ldr	r4, [pc, #48]	; (80035d8 <__libc_init_array+0x44>)
 80035a8:	f000 fc6a 	bl	8003e80 <_init>
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	2600      	movs	r6, #0
 80035b2:	42a6      	cmp	r6, r4
 80035b4:	d105      	bne.n	80035c2 <__libc_init_array+0x2e>
 80035b6:	bd70      	pop	{r4, r5, r6, pc}
 80035b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035bc:	4798      	blx	r3
 80035be:	3601      	adds	r6, #1
 80035c0:	e7ee      	b.n	80035a0 <__libc_init_array+0xc>
 80035c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c6:	4798      	blx	r3
 80035c8:	3601      	adds	r6, #1
 80035ca:	e7f2      	b.n	80035b2 <__libc_init_array+0x1e>
 80035cc:	080043b8 	.word	0x080043b8
 80035d0:	080043b8 	.word	0x080043b8
 80035d4:	080043b8 	.word	0x080043b8
 80035d8:	080043bc 	.word	0x080043bc

080035dc <__retarget_lock_acquire_recursive>:
 80035dc:	4770      	bx	lr

080035de <__retarget_lock_release_recursive>:
 80035de:	4770      	bx	lr

080035e0 <_free_r>:
 80035e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d044      	beq.n	8003670 <_free_r+0x90>
 80035e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035ea:	9001      	str	r0, [sp, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f1a1 0404 	sub.w	r4, r1, #4
 80035f2:	bfb8      	it	lt
 80035f4:	18e4      	addlt	r4, r4, r3
 80035f6:	f000 f8df 	bl	80037b8 <__malloc_lock>
 80035fa:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <_free_r+0x94>)
 80035fc:	9801      	ldr	r0, [sp, #4]
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	b933      	cbnz	r3, 8003610 <_free_r+0x30>
 8003602:	6063      	str	r3, [r4, #4]
 8003604:	6014      	str	r4, [r2, #0]
 8003606:	b003      	add	sp, #12
 8003608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800360c:	f000 b8da 	b.w	80037c4 <__malloc_unlock>
 8003610:	42a3      	cmp	r3, r4
 8003612:	d908      	bls.n	8003626 <_free_r+0x46>
 8003614:	6825      	ldr	r5, [r4, #0]
 8003616:	1961      	adds	r1, r4, r5
 8003618:	428b      	cmp	r3, r1
 800361a:	bf01      	itttt	eq
 800361c:	6819      	ldreq	r1, [r3, #0]
 800361e:	685b      	ldreq	r3, [r3, #4]
 8003620:	1949      	addeq	r1, r1, r5
 8003622:	6021      	streq	r1, [r4, #0]
 8003624:	e7ed      	b.n	8003602 <_free_r+0x22>
 8003626:	461a      	mov	r2, r3
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	b10b      	cbz	r3, 8003630 <_free_r+0x50>
 800362c:	42a3      	cmp	r3, r4
 800362e:	d9fa      	bls.n	8003626 <_free_r+0x46>
 8003630:	6811      	ldr	r1, [r2, #0]
 8003632:	1855      	adds	r5, r2, r1
 8003634:	42a5      	cmp	r5, r4
 8003636:	d10b      	bne.n	8003650 <_free_r+0x70>
 8003638:	6824      	ldr	r4, [r4, #0]
 800363a:	4421      	add	r1, r4
 800363c:	1854      	adds	r4, r2, r1
 800363e:	42a3      	cmp	r3, r4
 8003640:	6011      	str	r1, [r2, #0]
 8003642:	d1e0      	bne.n	8003606 <_free_r+0x26>
 8003644:	681c      	ldr	r4, [r3, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	6053      	str	r3, [r2, #4]
 800364a:	440c      	add	r4, r1
 800364c:	6014      	str	r4, [r2, #0]
 800364e:	e7da      	b.n	8003606 <_free_r+0x26>
 8003650:	d902      	bls.n	8003658 <_free_r+0x78>
 8003652:	230c      	movs	r3, #12
 8003654:	6003      	str	r3, [r0, #0]
 8003656:	e7d6      	b.n	8003606 <_free_r+0x26>
 8003658:	6825      	ldr	r5, [r4, #0]
 800365a:	1961      	adds	r1, r4, r5
 800365c:	428b      	cmp	r3, r1
 800365e:	bf04      	itt	eq
 8003660:	6819      	ldreq	r1, [r3, #0]
 8003662:	685b      	ldreq	r3, [r3, #4]
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	bf04      	itt	eq
 8003668:	1949      	addeq	r1, r1, r5
 800366a:	6021      	streq	r1, [r4, #0]
 800366c:	6054      	str	r4, [r2, #4]
 800366e:	e7ca      	b.n	8003606 <_free_r+0x26>
 8003670:	b003      	add	sp, #12
 8003672:	bd30      	pop	{r4, r5, pc}
 8003674:	20000344 	.word	0x20000344

08003678 <sbrk_aligned>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	4e0e      	ldr	r6, [pc, #56]	; (80036b4 <sbrk_aligned+0x3c>)
 800367c:	460c      	mov	r4, r1
 800367e:	6831      	ldr	r1, [r6, #0]
 8003680:	4605      	mov	r5, r0
 8003682:	b911      	cbnz	r1, 800368a <sbrk_aligned+0x12>
 8003684:	f000 fba6 	bl	8003dd4 <_sbrk_r>
 8003688:	6030      	str	r0, [r6, #0]
 800368a:	4621      	mov	r1, r4
 800368c:	4628      	mov	r0, r5
 800368e:	f000 fba1 	bl	8003dd4 <_sbrk_r>
 8003692:	1c43      	adds	r3, r0, #1
 8003694:	d00a      	beq.n	80036ac <sbrk_aligned+0x34>
 8003696:	1cc4      	adds	r4, r0, #3
 8003698:	f024 0403 	bic.w	r4, r4, #3
 800369c:	42a0      	cmp	r0, r4
 800369e:	d007      	beq.n	80036b0 <sbrk_aligned+0x38>
 80036a0:	1a21      	subs	r1, r4, r0
 80036a2:	4628      	mov	r0, r5
 80036a4:	f000 fb96 	bl	8003dd4 <_sbrk_r>
 80036a8:	3001      	adds	r0, #1
 80036aa:	d101      	bne.n	80036b0 <sbrk_aligned+0x38>
 80036ac:	f04f 34ff 	mov.w	r4, #4294967295
 80036b0:	4620      	mov	r0, r4
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	20000348 	.word	0x20000348

080036b8 <_malloc_r>:
 80036b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036bc:	1ccd      	adds	r5, r1, #3
 80036be:	f025 0503 	bic.w	r5, r5, #3
 80036c2:	3508      	adds	r5, #8
 80036c4:	2d0c      	cmp	r5, #12
 80036c6:	bf38      	it	cc
 80036c8:	250c      	movcc	r5, #12
 80036ca:	2d00      	cmp	r5, #0
 80036cc:	4607      	mov	r7, r0
 80036ce:	db01      	blt.n	80036d4 <_malloc_r+0x1c>
 80036d0:	42a9      	cmp	r1, r5
 80036d2:	d905      	bls.n	80036e0 <_malloc_r+0x28>
 80036d4:	230c      	movs	r3, #12
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	2600      	movs	r6, #0
 80036da:	4630      	mov	r0, r6
 80036dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037b4 <_malloc_r+0xfc>
 80036e4:	f000 f868 	bl	80037b8 <__malloc_lock>
 80036e8:	f8d8 3000 	ldr.w	r3, [r8]
 80036ec:	461c      	mov	r4, r3
 80036ee:	bb5c      	cbnz	r4, 8003748 <_malloc_r+0x90>
 80036f0:	4629      	mov	r1, r5
 80036f2:	4638      	mov	r0, r7
 80036f4:	f7ff ffc0 	bl	8003678 <sbrk_aligned>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	4604      	mov	r4, r0
 80036fc:	d155      	bne.n	80037aa <_malloc_r+0xf2>
 80036fe:	f8d8 4000 	ldr.w	r4, [r8]
 8003702:	4626      	mov	r6, r4
 8003704:	2e00      	cmp	r6, #0
 8003706:	d145      	bne.n	8003794 <_malloc_r+0xdc>
 8003708:	2c00      	cmp	r4, #0
 800370a:	d048      	beq.n	800379e <_malloc_r+0xe6>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	4631      	mov	r1, r6
 8003710:	4638      	mov	r0, r7
 8003712:	eb04 0903 	add.w	r9, r4, r3
 8003716:	f000 fb5d 	bl	8003dd4 <_sbrk_r>
 800371a:	4581      	cmp	r9, r0
 800371c:	d13f      	bne.n	800379e <_malloc_r+0xe6>
 800371e:	6821      	ldr	r1, [r4, #0]
 8003720:	1a6d      	subs	r5, r5, r1
 8003722:	4629      	mov	r1, r5
 8003724:	4638      	mov	r0, r7
 8003726:	f7ff ffa7 	bl	8003678 <sbrk_aligned>
 800372a:	3001      	adds	r0, #1
 800372c:	d037      	beq.n	800379e <_malloc_r+0xe6>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	442b      	add	r3, r5
 8003732:	6023      	str	r3, [r4, #0]
 8003734:	f8d8 3000 	ldr.w	r3, [r8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d038      	beq.n	80037ae <_malloc_r+0xf6>
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	42a2      	cmp	r2, r4
 8003740:	d12b      	bne.n	800379a <_malloc_r+0xe2>
 8003742:	2200      	movs	r2, #0
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e00f      	b.n	8003768 <_malloc_r+0xb0>
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	1b52      	subs	r2, r2, r5
 800374c:	d41f      	bmi.n	800378e <_malloc_r+0xd6>
 800374e:	2a0b      	cmp	r2, #11
 8003750:	d917      	bls.n	8003782 <_malloc_r+0xca>
 8003752:	1961      	adds	r1, r4, r5
 8003754:	42a3      	cmp	r3, r4
 8003756:	6025      	str	r5, [r4, #0]
 8003758:	bf18      	it	ne
 800375a:	6059      	strne	r1, [r3, #4]
 800375c:	6863      	ldr	r3, [r4, #4]
 800375e:	bf08      	it	eq
 8003760:	f8c8 1000 	streq.w	r1, [r8]
 8003764:	5162      	str	r2, [r4, r5]
 8003766:	604b      	str	r3, [r1, #4]
 8003768:	4638      	mov	r0, r7
 800376a:	f104 060b 	add.w	r6, r4, #11
 800376e:	f000 f829 	bl	80037c4 <__malloc_unlock>
 8003772:	f026 0607 	bic.w	r6, r6, #7
 8003776:	1d23      	adds	r3, r4, #4
 8003778:	1af2      	subs	r2, r6, r3
 800377a:	d0ae      	beq.n	80036da <_malloc_r+0x22>
 800377c:	1b9b      	subs	r3, r3, r6
 800377e:	50a3      	str	r3, [r4, r2]
 8003780:	e7ab      	b.n	80036da <_malloc_r+0x22>
 8003782:	42a3      	cmp	r3, r4
 8003784:	6862      	ldr	r2, [r4, #4]
 8003786:	d1dd      	bne.n	8003744 <_malloc_r+0x8c>
 8003788:	f8c8 2000 	str.w	r2, [r8]
 800378c:	e7ec      	b.n	8003768 <_malloc_r+0xb0>
 800378e:	4623      	mov	r3, r4
 8003790:	6864      	ldr	r4, [r4, #4]
 8003792:	e7ac      	b.n	80036ee <_malloc_r+0x36>
 8003794:	4634      	mov	r4, r6
 8003796:	6876      	ldr	r6, [r6, #4]
 8003798:	e7b4      	b.n	8003704 <_malloc_r+0x4c>
 800379a:	4613      	mov	r3, r2
 800379c:	e7cc      	b.n	8003738 <_malloc_r+0x80>
 800379e:	230c      	movs	r3, #12
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	4638      	mov	r0, r7
 80037a4:	f000 f80e 	bl	80037c4 <__malloc_unlock>
 80037a8:	e797      	b.n	80036da <_malloc_r+0x22>
 80037aa:	6025      	str	r5, [r4, #0]
 80037ac:	e7dc      	b.n	8003768 <_malloc_r+0xb0>
 80037ae:	605b      	str	r3, [r3, #4]
 80037b0:	deff      	udf	#255	; 0xff
 80037b2:	bf00      	nop
 80037b4:	20000344 	.word	0x20000344

080037b8 <__malloc_lock>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__malloc_lock+0x8>)
 80037ba:	f7ff bf0f 	b.w	80035dc <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	20000340 	.word	0x20000340

080037c4 <__malloc_unlock>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__malloc_unlock+0x8>)
 80037c6:	f7ff bf0a 	b.w	80035de <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000340 	.word	0x20000340

080037d0 <__ssputs_r>:
 80037d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d4:	688e      	ldr	r6, [r1, #8]
 80037d6:	461f      	mov	r7, r3
 80037d8:	42be      	cmp	r6, r7
 80037da:	680b      	ldr	r3, [r1, #0]
 80037dc:	4682      	mov	sl, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4690      	mov	r8, r2
 80037e2:	d82c      	bhi.n	800383e <__ssputs_r+0x6e>
 80037e4:	898a      	ldrh	r2, [r1, #12]
 80037e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037ea:	d026      	beq.n	800383a <__ssputs_r+0x6a>
 80037ec:	6965      	ldr	r5, [r4, #20]
 80037ee:	6909      	ldr	r1, [r1, #16]
 80037f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037f4:	eba3 0901 	sub.w	r9, r3, r1
 80037f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037fc:	1c7b      	adds	r3, r7, #1
 80037fe:	444b      	add	r3, r9
 8003800:	106d      	asrs	r5, r5, #1
 8003802:	429d      	cmp	r5, r3
 8003804:	bf38      	it	cc
 8003806:	461d      	movcc	r5, r3
 8003808:	0553      	lsls	r3, r2, #21
 800380a:	d527      	bpl.n	800385c <__ssputs_r+0x8c>
 800380c:	4629      	mov	r1, r5
 800380e:	f7ff ff53 	bl	80036b8 <_malloc_r>
 8003812:	4606      	mov	r6, r0
 8003814:	b360      	cbz	r0, 8003870 <__ssputs_r+0xa0>
 8003816:	6921      	ldr	r1, [r4, #16]
 8003818:	464a      	mov	r2, r9
 800381a:	f000 faeb 	bl	8003df4 <memcpy>
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003828:	81a3      	strh	r3, [r4, #12]
 800382a:	6126      	str	r6, [r4, #16]
 800382c:	6165      	str	r5, [r4, #20]
 800382e:	444e      	add	r6, r9
 8003830:	eba5 0509 	sub.w	r5, r5, r9
 8003834:	6026      	str	r6, [r4, #0]
 8003836:	60a5      	str	r5, [r4, #8]
 8003838:	463e      	mov	r6, r7
 800383a:	42be      	cmp	r6, r7
 800383c:	d900      	bls.n	8003840 <__ssputs_r+0x70>
 800383e:	463e      	mov	r6, r7
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	4632      	mov	r2, r6
 8003844:	4641      	mov	r1, r8
 8003846:	f000 faab 	bl	8003da0 <memmove>
 800384a:	68a3      	ldr	r3, [r4, #8]
 800384c:	1b9b      	subs	r3, r3, r6
 800384e:	60a3      	str	r3, [r4, #8]
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	4433      	add	r3, r6
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	2000      	movs	r0, #0
 8003858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385c:	462a      	mov	r2, r5
 800385e:	f000 fad7 	bl	8003e10 <_realloc_r>
 8003862:	4606      	mov	r6, r0
 8003864:	2800      	cmp	r0, #0
 8003866:	d1e0      	bne.n	800382a <__ssputs_r+0x5a>
 8003868:	6921      	ldr	r1, [r4, #16]
 800386a:	4650      	mov	r0, sl
 800386c:	f7ff feb8 	bl	80035e0 <_free_r>
 8003870:	230c      	movs	r3, #12
 8003872:	f8ca 3000 	str.w	r3, [sl]
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	f04f 30ff 	mov.w	r0, #4294967295
 8003882:	e7e9      	b.n	8003858 <__ssputs_r+0x88>

08003884 <_svfiprintf_r>:
 8003884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003888:	4698      	mov	r8, r3
 800388a:	898b      	ldrh	r3, [r1, #12]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	b09d      	sub	sp, #116	; 0x74
 8003890:	4607      	mov	r7, r0
 8003892:	460d      	mov	r5, r1
 8003894:	4614      	mov	r4, r2
 8003896:	d50e      	bpl.n	80038b6 <_svfiprintf_r+0x32>
 8003898:	690b      	ldr	r3, [r1, #16]
 800389a:	b963      	cbnz	r3, 80038b6 <_svfiprintf_r+0x32>
 800389c:	2140      	movs	r1, #64	; 0x40
 800389e:	f7ff ff0b 	bl	80036b8 <_malloc_r>
 80038a2:	6028      	str	r0, [r5, #0]
 80038a4:	6128      	str	r0, [r5, #16]
 80038a6:	b920      	cbnz	r0, 80038b2 <_svfiprintf_r+0x2e>
 80038a8:	230c      	movs	r3, #12
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	e0d0      	b.n	8003a54 <_svfiprintf_r+0x1d0>
 80038b2:	2340      	movs	r3, #64	; 0x40
 80038b4:	616b      	str	r3, [r5, #20]
 80038b6:	2300      	movs	r3, #0
 80038b8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ba:	2320      	movs	r3, #32
 80038bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80038c4:	2330      	movs	r3, #48	; 0x30
 80038c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a6c <_svfiprintf_r+0x1e8>
 80038ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038ce:	f04f 0901 	mov.w	r9, #1
 80038d2:	4623      	mov	r3, r4
 80038d4:	469a      	mov	sl, r3
 80038d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038da:	b10a      	cbz	r2, 80038e0 <_svfiprintf_r+0x5c>
 80038dc:	2a25      	cmp	r2, #37	; 0x25
 80038de:	d1f9      	bne.n	80038d4 <_svfiprintf_r+0x50>
 80038e0:	ebba 0b04 	subs.w	fp, sl, r4
 80038e4:	d00b      	beq.n	80038fe <_svfiprintf_r+0x7a>
 80038e6:	465b      	mov	r3, fp
 80038e8:	4622      	mov	r2, r4
 80038ea:	4629      	mov	r1, r5
 80038ec:	4638      	mov	r0, r7
 80038ee:	f7ff ff6f 	bl	80037d0 <__ssputs_r>
 80038f2:	3001      	adds	r0, #1
 80038f4:	f000 80a9 	beq.w	8003a4a <_svfiprintf_r+0x1c6>
 80038f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038fa:	445a      	add	r2, fp
 80038fc:	9209      	str	r2, [sp, #36]	; 0x24
 80038fe:	f89a 3000 	ldrb.w	r3, [sl]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80a1 	beq.w	8003a4a <_svfiprintf_r+0x1c6>
 8003908:	2300      	movs	r3, #0
 800390a:	f04f 32ff 	mov.w	r2, #4294967295
 800390e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003912:	f10a 0a01 	add.w	sl, sl, #1
 8003916:	9304      	str	r3, [sp, #16]
 8003918:	9307      	str	r3, [sp, #28]
 800391a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800391e:	931a      	str	r3, [sp, #104]	; 0x68
 8003920:	4654      	mov	r4, sl
 8003922:	2205      	movs	r2, #5
 8003924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003928:	4850      	ldr	r0, [pc, #320]	; (8003a6c <_svfiprintf_r+0x1e8>)
 800392a:	f7fc fc61 	bl	80001f0 <memchr>
 800392e:	9a04      	ldr	r2, [sp, #16]
 8003930:	b9d8      	cbnz	r0, 800396a <_svfiprintf_r+0xe6>
 8003932:	06d0      	lsls	r0, r2, #27
 8003934:	bf44      	itt	mi
 8003936:	2320      	movmi	r3, #32
 8003938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800393c:	0711      	lsls	r1, r2, #28
 800393e:	bf44      	itt	mi
 8003940:	232b      	movmi	r3, #43	; 0x2b
 8003942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003946:	f89a 3000 	ldrb.w	r3, [sl]
 800394a:	2b2a      	cmp	r3, #42	; 0x2a
 800394c:	d015      	beq.n	800397a <_svfiprintf_r+0xf6>
 800394e:	9a07      	ldr	r2, [sp, #28]
 8003950:	4654      	mov	r4, sl
 8003952:	2000      	movs	r0, #0
 8003954:	f04f 0c0a 	mov.w	ip, #10
 8003958:	4621      	mov	r1, r4
 800395a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800395e:	3b30      	subs	r3, #48	; 0x30
 8003960:	2b09      	cmp	r3, #9
 8003962:	d94d      	bls.n	8003a00 <_svfiprintf_r+0x17c>
 8003964:	b1b0      	cbz	r0, 8003994 <_svfiprintf_r+0x110>
 8003966:	9207      	str	r2, [sp, #28]
 8003968:	e014      	b.n	8003994 <_svfiprintf_r+0x110>
 800396a:	eba0 0308 	sub.w	r3, r0, r8
 800396e:	fa09 f303 	lsl.w	r3, r9, r3
 8003972:	4313      	orrs	r3, r2
 8003974:	9304      	str	r3, [sp, #16]
 8003976:	46a2      	mov	sl, r4
 8003978:	e7d2      	b.n	8003920 <_svfiprintf_r+0x9c>
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	1d19      	adds	r1, r3, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	9103      	str	r1, [sp, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	bfbb      	ittet	lt
 8003986:	425b      	neglt	r3, r3
 8003988:	f042 0202 	orrlt.w	r2, r2, #2
 800398c:	9307      	strge	r3, [sp, #28]
 800398e:	9307      	strlt	r3, [sp, #28]
 8003990:	bfb8      	it	lt
 8003992:	9204      	strlt	r2, [sp, #16]
 8003994:	7823      	ldrb	r3, [r4, #0]
 8003996:	2b2e      	cmp	r3, #46	; 0x2e
 8003998:	d10c      	bne.n	80039b4 <_svfiprintf_r+0x130>
 800399a:	7863      	ldrb	r3, [r4, #1]
 800399c:	2b2a      	cmp	r3, #42	; 0x2a
 800399e:	d134      	bne.n	8003a0a <_svfiprintf_r+0x186>
 80039a0:	9b03      	ldr	r3, [sp, #12]
 80039a2:	1d1a      	adds	r2, r3, #4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	9203      	str	r2, [sp, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bfb8      	it	lt
 80039ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80039b0:	3402      	adds	r4, #2
 80039b2:	9305      	str	r3, [sp, #20]
 80039b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003a7c <_svfiprintf_r+0x1f8>
 80039b8:	7821      	ldrb	r1, [r4, #0]
 80039ba:	2203      	movs	r2, #3
 80039bc:	4650      	mov	r0, sl
 80039be:	f7fc fc17 	bl	80001f0 <memchr>
 80039c2:	b138      	cbz	r0, 80039d4 <_svfiprintf_r+0x150>
 80039c4:	9b04      	ldr	r3, [sp, #16]
 80039c6:	eba0 000a 	sub.w	r0, r0, sl
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	4082      	lsls	r2, r0
 80039ce:	4313      	orrs	r3, r2
 80039d0:	3401      	adds	r4, #1
 80039d2:	9304      	str	r3, [sp, #16]
 80039d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d8:	4825      	ldr	r0, [pc, #148]	; (8003a70 <_svfiprintf_r+0x1ec>)
 80039da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039de:	2206      	movs	r2, #6
 80039e0:	f7fc fc06 	bl	80001f0 <memchr>
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d038      	beq.n	8003a5a <_svfiprintf_r+0x1d6>
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <_svfiprintf_r+0x1f0>)
 80039ea:	bb1b      	cbnz	r3, 8003a34 <_svfiprintf_r+0x1b0>
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	3307      	adds	r3, #7
 80039f0:	f023 0307 	bic.w	r3, r3, #7
 80039f4:	3308      	adds	r3, #8
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039fa:	4433      	add	r3, r6
 80039fc:	9309      	str	r3, [sp, #36]	; 0x24
 80039fe:	e768      	b.n	80038d2 <_svfiprintf_r+0x4e>
 8003a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a04:	460c      	mov	r4, r1
 8003a06:	2001      	movs	r0, #1
 8003a08:	e7a6      	b.n	8003958 <_svfiprintf_r+0xd4>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	3401      	adds	r4, #1
 8003a0e:	9305      	str	r3, [sp, #20]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f04f 0c0a 	mov.w	ip, #10
 8003a16:	4620      	mov	r0, r4
 8003a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a1c:	3a30      	subs	r2, #48	; 0x30
 8003a1e:	2a09      	cmp	r2, #9
 8003a20:	d903      	bls.n	8003a2a <_svfiprintf_r+0x1a6>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0c6      	beq.n	80039b4 <_svfiprintf_r+0x130>
 8003a26:	9105      	str	r1, [sp, #20]
 8003a28:	e7c4      	b.n	80039b4 <_svfiprintf_r+0x130>
 8003a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a2e:	4604      	mov	r4, r0
 8003a30:	2301      	movs	r3, #1
 8003a32:	e7f0      	b.n	8003a16 <_svfiprintf_r+0x192>
 8003a34:	ab03      	add	r3, sp, #12
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	462a      	mov	r2, r5
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <_svfiprintf_r+0x1f4>)
 8003a3c:	a904      	add	r1, sp, #16
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f3af 8000 	nop.w
 8003a44:	1c42      	adds	r2, r0, #1
 8003a46:	4606      	mov	r6, r0
 8003a48:	d1d6      	bne.n	80039f8 <_svfiprintf_r+0x174>
 8003a4a:	89ab      	ldrh	r3, [r5, #12]
 8003a4c:	065b      	lsls	r3, r3, #25
 8003a4e:	f53f af2d 	bmi.w	80038ac <_svfiprintf_r+0x28>
 8003a52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a54:	b01d      	add	sp, #116	; 0x74
 8003a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5a:	ab03      	add	r3, sp, #12
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	462a      	mov	r2, r5
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <_svfiprintf_r+0x1f4>)
 8003a62:	a904      	add	r1, sp, #16
 8003a64:	4638      	mov	r0, r7
 8003a66:	f000 f879 	bl	8003b5c <_printf_i>
 8003a6a:	e7eb      	b.n	8003a44 <_svfiprintf_r+0x1c0>
 8003a6c:	0800437c 	.word	0x0800437c
 8003a70:	08004386 	.word	0x08004386
 8003a74:	00000000 	.word	0x00000000
 8003a78:	080037d1 	.word	0x080037d1
 8003a7c:	08004382 	.word	0x08004382

08003a80 <_printf_common>:
 8003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	4616      	mov	r6, r2
 8003a86:	4699      	mov	r9, r3
 8003a88:	688a      	ldr	r2, [r1, #8]
 8003a8a:	690b      	ldr	r3, [r1, #16]
 8003a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	bfb8      	it	lt
 8003a94:	4613      	movlt	r3, r2
 8003a96:	6033      	str	r3, [r6, #0]
 8003a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	b10a      	cbz	r2, 8003aa6 <_printf_common+0x26>
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	0699      	lsls	r1, r3, #26
 8003aaa:	bf42      	ittt	mi
 8003aac:	6833      	ldrmi	r3, [r6, #0]
 8003aae:	3302      	addmi	r3, #2
 8003ab0:	6033      	strmi	r3, [r6, #0]
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	f015 0506 	ands.w	r5, r5, #6
 8003ab8:	d106      	bne.n	8003ac8 <_printf_common+0x48>
 8003aba:	f104 0a19 	add.w	sl, r4, #25
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	6832      	ldr	r2, [r6, #0]
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	dc26      	bgt.n	8003b16 <_printf_common+0x96>
 8003ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003acc:	1e13      	subs	r3, r2, #0
 8003ace:	6822      	ldr	r2, [r4, #0]
 8003ad0:	bf18      	it	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	0692      	lsls	r2, r2, #26
 8003ad6:	d42b      	bmi.n	8003b30 <_printf_common+0xb0>
 8003ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003adc:	4649      	mov	r1, r9
 8003ade:	4638      	mov	r0, r7
 8003ae0:	47c0      	blx	r8
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d01e      	beq.n	8003b24 <_printf_common+0xa4>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	6922      	ldr	r2, [r4, #16]
 8003aea:	f003 0306 	and.w	r3, r3, #6
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	bf02      	ittt	eq
 8003af2:	68e5      	ldreq	r5, [r4, #12]
 8003af4:	6833      	ldreq	r3, [r6, #0]
 8003af6:	1aed      	subeq	r5, r5, r3
 8003af8:	68a3      	ldr	r3, [r4, #8]
 8003afa:	bf0c      	ite	eq
 8003afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b00:	2500      	movne	r5, #0
 8003b02:	4293      	cmp	r3, r2
 8003b04:	bfc4      	itt	gt
 8003b06:	1a9b      	subgt	r3, r3, r2
 8003b08:	18ed      	addgt	r5, r5, r3
 8003b0a:	2600      	movs	r6, #0
 8003b0c:	341a      	adds	r4, #26
 8003b0e:	42b5      	cmp	r5, r6
 8003b10:	d11a      	bne.n	8003b48 <_printf_common+0xc8>
 8003b12:	2000      	movs	r0, #0
 8003b14:	e008      	b.n	8003b28 <_printf_common+0xa8>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4652      	mov	r2, sl
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	47c0      	blx	r8
 8003b20:	3001      	adds	r0, #1
 8003b22:	d103      	bne.n	8003b2c <_printf_common+0xac>
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	e7c6      	b.n	8003abe <_printf_common+0x3e>
 8003b30:	18e1      	adds	r1, r4, r3
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	2030      	movs	r0, #48	; 0x30
 8003b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b3a:	4422      	add	r2, r4
 8003b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b44:	3302      	adds	r3, #2
 8003b46:	e7c7      	b.n	8003ad8 <_printf_common+0x58>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	4638      	mov	r0, r7
 8003b50:	47c0      	blx	r8
 8003b52:	3001      	adds	r0, #1
 8003b54:	d0e6      	beq.n	8003b24 <_printf_common+0xa4>
 8003b56:	3601      	adds	r6, #1
 8003b58:	e7d9      	b.n	8003b0e <_printf_common+0x8e>
	...

08003b5c <_printf_i>:
 8003b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	7e0f      	ldrb	r7, [r1, #24]
 8003b62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b64:	2f78      	cmp	r7, #120	; 0x78
 8003b66:	4691      	mov	r9, r2
 8003b68:	4680      	mov	r8, r0
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	469a      	mov	sl, r3
 8003b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b72:	d807      	bhi.n	8003b84 <_printf_i+0x28>
 8003b74:	2f62      	cmp	r7, #98	; 0x62
 8003b76:	d80a      	bhi.n	8003b8e <_printf_i+0x32>
 8003b78:	2f00      	cmp	r7, #0
 8003b7a:	f000 80d4 	beq.w	8003d26 <_printf_i+0x1ca>
 8003b7e:	2f58      	cmp	r7, #88	; 0x58
 8003b80:	f000 80c0 	beq.w	8003d04 <_printf_i+0x1a8>
 8003b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b8c:	e03a      	b.n	8003c04 <_printf_i+0xa8>
 8003b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b92:	2b15      	cmp	r3, #21
 8003b94:	d8f6      	bhi.n	8003b84 <_printf_i+0x28>
 8003b96:	a101      	add	r1, pc, #4	; (adr r1, 8003b9c <_printf_i+0x40>)
 8003b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b9c:	08003bf5 	.word	0x08003bf5
 8003ba0:	08003c09 	.word	0x08003c09
 8003ba4:	08003b85 	.word	0x08003b85
 8003ba8:	08003b85 	.word	0x08003b85
 8003bac:	08003b85 	.word	0x08003b85
 8003bb0:	08003b85 	.word	0x08003b85
 8003bb4:	08003c09 	.word	0x08003c09
 8003bb8:	08003b85 	.word	0x08003b85
 8003bbc:	08003b85 	.word	0x08003b85
 8003bc0:	08003b85 	.word	0x08003b85
 8003bc4:	08003b85 	.word	0x08003b85
 8003bc8:	08003d0d 	.word	0x08003d0d
 8003bcc:	08003c35 	.word	0x08003c35
 8003bd0:	08003cc7 	.word	0x08003cc7
 8003bd4:	08003b85 	.word	0x08003b85
 8003bd8:	08003b85 	.word	0x08003b85
 8003bdc:	08003d2f 	.word	0x08003d2f
 8003be0:	08003b85 	.word	0x08003b85
 8003be4:	08003c35 	.word	0x08003c35
 8003be8:	08003b85 	.word	0x08003b85
 8003bec:	08003b85 	.word	0x08003b85
 8003bf0:	08003ccf 	.word	0x08003ccf
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	1d1a      	adds	r2, r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	602a      	str	r2, [r5, #0]
 8003bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c04:	2301      	movs	r3, #1
 8003c06:	e09f      	b.n	8003d48 <_printf_i+0x1ec>
 8003c08:	6820      	ldr	r0, [r4, #0]
 8003c0a:	682b      	ldr	r3, [r5, #0]
 8003c0c:	0607      	lsls	r7, r0, #24
 8003c0e:	f103 0104 	add.w	r1, r3, #4
 8003c12:	6029      	str	r1, [r5, #0]
 8003c14:	d501      	bpl.n	8003c1a <_printf_i+0xbe>
 8003c16:	681e      	ldr	r6, [r3, #0]
 8003c18:	e003      	b.n	8003c22 <_printf_i+0xc6>
 8003c1a:	0646      	lsls	r6, r0, #25
 8003c1c:	d5fb      	bpl.n	8003c16 <_printf_i+0xba>
 8003c1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c22:	2e00      	cmp	r6, #0
 8003c24:	da03      	bge.n	8003c2e <_printf_i+0xd2>
 8003c26:	232d      	movs	r3, #45	; 0x2d
 8003c28:	4276      	negs	r6, r6
 8003c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2e:	485a      	ldr	r0, [pc, #360]	; (8003d98 <_printf_i+0x23c>)
 8003c30:	230a      	movs	r3, #10
 8003c32:	e012      	b.n	8003c5a <_printf_i+0xfe>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	1d19      	adds	r1, r3, #4
 8003c3a:	6029      	str	r1, [r5, #0]
 8003c3c:	0605      	lsls	r5, r0, #24
 8003c3e:	d501      	bpl.n	8003c44 <_printf_i+0xe8>
 8003c40:	681e      	ldr	r6, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <_printf_i+0xee>
 8003c44:	0641      	lsls	r1, r0, #25
 8003c46:	d5fb      	bpl.n	8003c40 <_printf_i+0xe4>
 8003c48:	881e      	ldrh	r6, [r3, #0]
 8003c4a:	4853      	ldr	r0, [pc, #332]	; (8003d98 <_printf_i+0x23c>)
 8003c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c4e:	bf0c      	ite	eq
 8003c50:	2308      	moveq	r3, #8
 8003c52:	230a      	movne	r3, #10
 8003c54:	2100      	movs	r1, #0
 8003c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c5a:	6865      	ldr	r5, [r4, #4]
 8003c5c:	60a5      	str	r5, [r4, #8]
 8003c5e:	2d00      	cmp	r5, #0
 8003c60:	bfa2      	ittt	ge
 8003c62:	6821      	ldrge	r1, [r4, #0]
 8003c64:	f021 0104 	bicge.w	r1, r1, #4
 8003c68:	6021      	strge	r1, [r4, #0]
 8003c6a:	b90e      	cbnz	r6, 8003c70 <_printf_i+0x114>
 8003c6c:	2d00      	cmp	r5, #0
 8003c6e:	d04b      	beq.n	8003d08 <_printf_i+0x1ac>
 8003c70:	4615      	mov	r5, r2
 8003c72:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c76:	fb03 6711 	mls	r7, r3, r1, r6
 8003c7a:	5dc7      	ldrb	r7, [r0, r7]
 8003c7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c80:	4637      	mov	r7, r6
 8003c82:	42bb      	cmp	r3, r7
 8003c84:	460e      	mov	r6, r1
 8003c86:	d9f4      	bls.n	8003c72 <_printf_i+0x116>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10b      	bne.n	8003ca4 <_printf_i+0x148>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	07de      	lsls	r6, r3, #31
 8003c90:	d508      	bpl.n	8003ca4 <_printf_i+0x148>
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	6861      	ldr	r1, [r4, #4]
 8003c96:	4299      	cmp	r1, r3
 8003c98:	bfde      	ittt	le
 8003c9a:	2330      	movle	r3, #48	; 0x30
 8003c9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ca4:	1b52      	subs	r2, r2, r5
 8003ca6:	6122      	str	r2, [r4, #16]
 8003ca8:	f8cd a000 	str.w	sl, [sp]
 8003cac:	464b      	mov	r3, r9
 8003cae:	aa03      	add	r2, sp, #12
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f7ff fee4 	bl	8003a80 <_printf_common>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d14a      	bne.n	8003d52 <_printf_i+0x1f6>
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	b004      	add	sp, #16
 8003cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	f043 0320 	orr.w	r3, r3, #32
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	4833      	ldr	r0, [pc, #204]	; (8003d9c <_printf_i+0x240>)
 8003cd0:	2778      	movs	r7, #120	; 0x78
 8003cd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	6829      	ldr	r1, [r5, #0]
 8003cda:	061f      	lsls	r7, r3, #24
 8003cdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ce0:	d402      	bmi.n	8003ce8 <_printf_i+0x18c>
 8003ce2:	065f      	lsls	r7, r3, #25
 8003ce4:	bf48      	it	mi
 8003ce6:	b2b6      	uxthmi	r6, r6
 8003ce8:	07df      	lsls	r7, r3, #31
 8003cea:	bf48      	it	mi
 8003cec:	f043 0320 	orrmi.w	r3, r3, #32
 8003cf0:	6029      	str	r1, [r5, #0]
 8003cf2:	bf48      	it	mi
 8003cf4:	6023      	strmi	r3, [r4, #0]
 8003cf6:	b91e      	cbnz	r6, 8003d00 <_printf_i+0x1a4>
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	f023 0320 	bic.w	r3, r3, #32
 8003cfe:	6023      	str	r3, [r4, #0]
 8003d00:	2310      	movs	r3, #16
 8003d02:	e7a7      	b.n	8003c54 <_printf_i+0xf8>
 8003d04:	4824      	ldr	r0, [pc, #144]	; (8003d98 <_printf_i+0x23c>)
 8003d06:	e7e4      	b.n	8003cd2 <_printf_i+0x176>
 8003d08:	4615      	mov	r5, r2
 8003d0a:	e7bd      	b.n	8003c88 <_printf_i+0x12c>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	6826      	ldr	r6, [r4, #0]
 8003d10:	6961      	ldr	r1, [r4, #20]
 8003d12:	1d18      	adds	r0, r3, #4
 8003d14:	6028      	str	r0, [r5, #0]
 8003d16:	0635      	lsls	r5, r6, #24
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	d501      	bpl.n	8003d20 <_printf_i+0x1c4>
 8003d1c:	6019      	str	r1, [r3, #0]
 8003d1e:	e002      	b.n	8003d26 <_printf_i+0x1ca>
 8003d20:	0670      	lsls	r0, r6, #25
 8003d22:	d5fb      	bpl.n	8003d1c <_printf_i+0x1c0>
 8003d24:	8019      	strh	r1, [r3, #0]
 8003d26:	2300      	movs	r3, #0
 8003d28:	6123      	str	r3, [r4, #16]
 8003d2a:	4615      	mov	r5, r2
 8003d2c:	e7bc      	b.n	8003ca8 <_printf_i+0x14c>
 8003d2e:	682b      	ldr	r3, [r5, #0]
 8003d30:	1d1a      	adds	r2, r3, #4
 8003d32:	602a      	str	r2, [r5, #0]
 8003d34:	681d      	ldr	r5, [r3, #0]
 8003d36:	6862      	ldr	r2, [r4, #4]
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	f7fc fa58 	bl	80001f0 <memchr>
 8003d40:	b108      	cbz	r0, 8003d46 <_printf_i+0x1ea>
 8003d42:	1b40      	subs	r0, r0, r5
 8003d44:	6060      	str	r0, [r4, #4]
 8003d46:	6863      	ldr	r3, [r4, #4]
 8003d48:	6123      	str	r3, [r4, #16]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d50:	e7aa      	b.n	8003ca8 <_printf_i+0x14c>
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	462a      	mov	r2, r5
 8003d56:	4649      	mov	r1, r9
 8003d58:	4640      	mov	r0, r8
 8003d5a:	47d0      	blx	sl
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d0ad      	beq.n	8003cbc <_printf_i+0x160>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	079b      	lsls	r3, r3, #30
 8003d64:	d413      	bmi.n	8003d8e <_printf_i+0x232>
 8003d66:	68e0      	ldr	r0, [r4, #12]
 8003d68:	9b03      	ldr	r3, [sp, #12]
 8003d6a:	4298      	cmp	r0, r3
 8003d6c:	bfb8      	it	lt
 8003d6e:	4618      	movlt	r0, r3
 8003d70:	e7a6      	b.n	8003cc0 <_printf_i+0x164>
 8003d72:	2301      	movs	r3, #1
 8003d74:	4632      	mov	r2, r6
 8003d76:	4649      	mov	r1, r9
 8003d78:	4640      	mov	r0, r8
 8003d7a:	47d0      	blx	sl
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d09d      	beq.n	8003cbc <_printf_i+0x160>
 8003d80:	3501      	adds	r5, #1
 8003d82:	68e3      	ldr	r3, [r4, #12]
 8003d84:	9903      	ldr	r1, [sp, #12]
 8003d86:	1a5b      	subs	r3, r3, r1
 8003d88:	42ab      	cmp	r3, r5
 8003d8a:	dcf2      	bgt.n	8003d72 <_printf_i+0x216>
 8003d8c:	e7eb      	b.n	8003d66 <_printf_i+0x20a>
 8003d8e:	2500      	movs	r5, #0
 8003d90:	f104 0619 	add.w	r6, r4, #25
 8003d94:	e7f5      	b.n	8003d82 <_printf_i+0x226>
 8003d96:	bf00      	nop
 8003d98:	0800438d 	.word	0x0800438d
 8003d9c:	0800439e 	.word	0x0800439e

08003da0 <memmove>:
 8003da0:	4288      	cmp	r0, r1
 8003da2:	b510      	push	{r4, lr}
 8003da4:	eb01 0402 	add.w	r4, r1, r2
 8003da8:	d902      	bls.n	8003db0 <memmove+0x10>
 8003daa:	4284      	cmp	r4, r0
 8003dac:	4623      	mov	r3, r4
 8003dae:	d807      	bhi.n	8003dc0 <memmove+0x20>
 8003db0:	1e43      	subs	r3, r0, #1
 8003db2:	42a1      	cmp	r1, r4
 8003db4:	d008      	beq.n	8003dc8 <memmove+0x28>
 8003db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dbe:	e7f8      	b.n	8003db2 <memmove+0x12>
 8003dc0:	4402      	add	r2, r0
 8003dc2:	4601      	mov	r1, r0
 8003dc4:	428a      	cmp	r2, r1
 8003dc6:	d100      	bne.n	8003dca <memmove+0x2a>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dd2:	e7f7      	b.n	8003dc4 <memmove+0x24>

08003dd4 <_sbrk_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d06      	ldr	r5, [pc, #24]	; (8003df0 <_sbrk_r+0x1c>)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4608      	mov	r0, r1
 8003dde:	602b      	str	r3, [r5, #0]
 8003de0:	f7fd fbd4 	bl	800158c <_sbrk>
 8003de4:	1c43      	adds	r3, r0, #1
 8003de6:	d102      	bne.n	8003dee <_sbrk_r+0x1a>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	b103      	cbz	r3, 8003dee <_sbrk_r+0x1a>
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	bd38      	pop	{r3, r4, r5, pc}
 8003df0:	2000033c 	.word	0x2000033c

08003df4 <memcpy>:
 8003df4:	440a      	add	r2, r1
 8003df6:	4291      	cmp	r1, r2
 8003df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dfc:	d100      	bne.n	8003e00 <memcpy+0xc>
 8003dfe:	4770      	bx	lr
 8003e00:	b510      	push	{r4, lr}
 8003e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e0a:	4291      	cmp	r1, r2
 8003e0c:	d1f9      	bne.n	8003e02 <memcpy+0xe>
 8003e0e:	bd10      	pop	{r4, pc}

08003e10 <_realloc_r>:
 8003e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e14:	4680      	mov	r8, r0
 8003e16:	4614      	mov	r4, r2
 8003e18:	460e      	mov	r6, r1
 8003e1a:	b921      	cbnz	r1, 8003e26 <_realloc_r+0x16>
 8003e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e20:	4611      	mov	r1, r2
 8003e22:	f7ff bc49 	b.w	80036b8 <_malloc_r>
 8003e26:	b92a      	cbnz	r2, 8003e34 <_realloc_r+0x24>
 8003e28:	f7ff fbda 	bl	80035e0 <_free_r>
 8003e2c:	4625      	mov	r5, r4
 8003e2e:	4628      	mov	r0, r5
 8003e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e34:	f000 f81b 	bl	8003e6e <_malloc_usable_size_r>
 8003e38:	4284      	cmp	r4, r0
 8003e3a:	4607      	mov	r7, r0
 8003e3c:	d802      	bhi.n	8003e44 <_realloc_r+0x34>
 8003e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e42:	d812      	bhi.n	8003e6a <_realloc_r+0x5a>
 8003e44:	4621      	mov	r1, r4
 8003e46:	4640      	mov	r0, r8
 8003e48:	f7ff fc36 	bl	80036b8 <_malloc_r>
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	d0ed      	beq.n	8003e2e <_realloc_r+0x1e>
 8003e52:	42bc      	cmp	r4, r7
 8003e54:	4622      	mov	r2, r4
 8003e56:	4631      	mov	r1, r6
 8003e58:	bf28      	it	cs
 8003e5a:	463a      	movcs	r2, r7
 8003e5c:	f7ff ffca 	bl	8003df4 <memcpy>
 8003e60:	4631      	mov	r1, r6
 8003e62:	4640      	mov	r0, r8
 8003e64:	f7ff fbbc 	bl	80035e0 <_free_r>
 8003e68:	e7e1      	b.n	8003e2e <_realloc_r+0x1e>
 8003e6a:	4635      	mov	r5, r6
 8003e6c:	e7df      	b.n	8003e2e <_realloc_r+0x1e>

08003e6e <_malloc_usable_size_r>:
 8003e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e72:	1f18      	subs	r0, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bfbc      	itt	lt
 8003e78:	580b      	ldrlt	r3, [r1, r0]
 8003e7a:	18c0      	addlt	r0, r0, r3
 8003e7c:	4770      	bx	lr
	...

08003e80 <_init>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

08003e8c <_fini>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr
